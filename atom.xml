<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>业余文艺架构师之路</title>
  <subtitle>愿我的只言片语，为你的成长带来帮助！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://geeksblog.cc/"/>
  <updated>2018-03-26T14:45:15.631Z</updated>
  <id>http://geeksblog.cc/</id>
  
  <author>
    <name>业余文艺架构师</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式锁的几种实现方式</title>
    <link href="http://geeksblog.cc/dslock.html"/>
    <id>http://geeksblog.cc/dslock.html</id>
    <published>2018-03-02T14:18:29.000Z</published>
    <updated>2018-03-26T14:45:15.631Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 分布式锁的几种实现方式：</strong> <Excerpt in index | 首页摘要><br>在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h2><p>分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。</p>
<h2 id="分布式锁需要解决的问题"><a href="#分布式锁需要解决的问题" class="headerlink" title="分布式锁需要解决的问题"></a>分布式锁需要解决的问题</h2><ol>
<li>互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。</li>
<li>安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。</li>
<li>死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。</li>
<li>容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。</li>
</ol>
<h2 id="分布式锁的实现方式"><a href="#分布式锁的实现方式" class="headerlink" title="分布式锁的实现方式"></a>分布式锁的实现方式</h2><ol>
<li><p>数据库实现</p>
</li>
<li><p>缓存实现，比如redis</p>
</li>
<li><p>zookeeper实现</p>
</li>
</ol>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 分布式锁的几种实现方式：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。&lt;br&gt;
    
    </summary>
    
      <category term="分布式架构" scheme="http://geeksblog.cc/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="java" scheme="http://geeksblog.cc/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统理论基础</title>
    <link href="http://geeksblog.cc/dsbasic.html"/>
    <id>http://geeksblog.cc/dsbasic.html</id>
    <published>2018-02-26T14:31:40.000Z</published>
    <updated>2018-03-29T00:30:51.561Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 分布式系统理论基础：</strong> <Excerpt in index | 首页摘要><br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>定理：任何分布式架构都只能同时满足两点，无法三者兼顾。</p>
<ul>
<li>Consistency（一致性），数据一致更新，所有的数据变动都是同步的。</li>
<li>Availability（可用性），好的响应性能。</li>
<li>Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。</li>
</ul>
<p>关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：</p>
<ol>
<li>Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。</li>
<li>Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。</li>
<li>Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。</li>
<li>Durability持久性 一旦事务完成，就不能返回。<br>跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)<br>是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。</li>
</ol>
<h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><ul>
<li>Basically Available 基本可用，支持分区失败</li>
<li>Soft state 软状态，允许状态某个时间短不同步，或者异步</li>
<li>Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。</li>
</ul>
<h2 id="paxos协议"><a href="#paxos协议" class="headerlink" title="paxos协议"></a>paxos协议</h2><p>Paxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。</p>
<h3 id="Paxos的两个组件"><a href="#Paxos的两个组件" class="headerlink" title="Paxos的两个组件:"></a>Paxos的两个组件:</h3><ul>
<li>Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。</li>
<li>Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值</li>
</ul>
<h3 id="Paxos有两个原则"><a href="#Paxos有两个原则" class="headerlink" title="Paxos有两个原则"></a>Paxos有两个原则</h3><ol>
<li>安全原则—保证不能做错的事<ul>
<li>a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)</li>
<li>b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。</li>
</ul>
</li>
<li>存活原则—只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：<ul>
<li>a）最终会批准某个被提议的值；</li>
<li>b）一个值被批准了，其他服务器最终会学习到这个值。</li>
</ul>
</li>
</ol>
<h2 id="zab协议-ZooKeeper-Atomic-broadcast-protocol"><a href="#zab协议-ZooKeeper-Atomic-broadcast-protocol" class="headerlink" title="zab协议(ZooKeeper Atomic broadcast protocol)"></a>zab协议(ZooKeeper Atomic broadcast protocol)</h2><p>ZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>
<h3 id="Phase-0-Leader-election（选举阶段）"><a href="#Phase-0-Leader-election（选举阶段）" class="headerlink" title="Phase 0: Leader election（选举阶段）"></a>Phase 0: Leader election（选举阶段）</h3><p>节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。</p>
<h3 id="Phase-1-Discovery（发现阶段）"><a href="#Phase-1-Discovery（发现阶段）" class="headerlink" title="Phase 1: Discovery（发现阶段）"></a>Phase 1: Discovery（发现阶段）</h3><p>在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。<br>一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。</p>
<h3 id="Phase-2-Synchronization（同步阶段）"><a href="#Phase-2-Synchronization（同步阶段）" class="headerlink" title="Phase 2: Synchronization（同步阶段）"></a>Phase 2: Synchronization（同步阶段）</h3><p>同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。</p>
<h3 id="Phase-3-Broadcast（广播阶段）"><a href="#Phase-3-Broadcast（广播阶段）" class="headerlink" title="Phase 3: Broadcast（广播阶段）"></a>Phase 3: Broadcast（广播阶段）</h3><p>到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</p>
<h2 id="raft协议"><a href="#raft协议" class="headerlink" title="raft协议"></a>raft协议</h2><p>在Raft中，每个结点会处于下面三种状态中的一种：</p>
<h3 id="follower"><a href="#follower" class="headerlink" title="follower"></a>follower</h3><p>所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。</p>
<h3 id="candidate"><a href="#candidate" class="headerlink" title="candidate"></a>candidate</h3><p>会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)</p>
<h3 id="leader"><a href="#leader" class="headerlink" title="leader"></a>leader</h3><p>所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：</p>
<pre><code>1. 复制日志到所有follower结点(replicate entry)
2. 大部分结点响应时才提交日志
3. 通知所有follower结点日志已提交
4. 所有follower也提交日志
5. 现在整个系统处于一致的状态
</code></pre><blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 分布式系统理论基础：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。&lt;br&gt;
    
    </summary>
    
      <category term="分布式架构" scheme="http://geeksblog.cc/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="protocol" scheme="http://geeksblog.cc/tags/protocol/"/>
    
  </entry>
  
  <entry>
    <title>为什么使用Zookeeper？</title>
    <link href="http://geeksblog.cc/zookeeper.html"/>
    <id>http://geeksblog.cc/zookeeper.html</id>
    <published>2018-02-18T14:15:44.000Z</published>
    <updated>2018-04-07T07:13:30.805Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 为什么使用Zookeeper？：</strong> <Excerpt in index | 首页摘要><br>随着大型互联网的发展，分布式系统应用越来越来越广泛，zookeeper成了分布式系统的标配。集群容错，动态负载均衡，动态扩容，异地多活等架构都依赖于zookeeper而搭建。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="zookeeper是什么？"><a href="#zookeeper是什么？" class="headerlink" title="zookeeper是什么？"></a>zookeeper是什么？</h2><p>zookeeper是由雅虎创建的，基于google chubby,一个开源的分布式协调服务，是分布式数据一致性的解决方案。</p>
<h2 id="zookeeper的特性"><a href="#zookeeper的特性" class="headerlink" title="zookeeper的特性"></a>zookeeper的特性</h2><ul>
<li>顺序一致性，从同一个客户端发起的事务请求，最终会严格按照顺序被应用到zookeeper中。</li>
<li>原子性，事务请求在所有集群是一致的，要么都成功，要么都失败。</li>
<li>可靠性，一旦服务器成功应用某个事务，那么所有集群中一定同步并保留。</li>
<li>实时性，一个事务被应用，客户端能立即从服务端读取到状态变化。</li>
</ul>
<h2 id="zookeeper的原理？"><a href="#zookeeper的原理？" class="headerlink" title="zookeeper的原理？"></a>zookeeper的原理？</h2><p>基于分布式协议pasxo，而实现了自己的zab协议。保证数据的一致性。</p>
<h2 id="zookeeper的数据模型"><a href="#zookeeper的数据模型" class="headerlink" title="zookeeper的数据模型"></a>zookeeper的数据模型</h2><ul>
<li>持久化节点，节点创建后一直存在，直到主动删除。</li>
<li>持久化有序节点，每个节点都会为它的一级子节点维护一个顺序。</li>
<li>临时节点，临时节点的生命周期和客户端会话保持一直。客户端会话失效，节点自动清理。</li>
<li>临时有序节点，临时节点基础上多一个顺序性特性。</li>
</ul>
<h2 id="zookeeper使用场景有哪些？"><a href="#zookeeper使用场景有哪些？" class="headerlink" title="zookeeper使用场景有哪些？"></a>zookeeper使用场景有哪些？</h2><ul>
<li>订阅发布<ul>
<li>watcher机制</li>
<li>统一配置管理(disconf)</li>
</ul>
</li>
<li>分布式锁（redis也可以）</li>
<li>分布式队列</li>
<li>负载均衡(dubbo)</li>
<li>ID生成器</li>
<li>master选举(kafka,hadoop,hbase)</li>
</ul>
<h2 id="集群角色有哪些？"><a href="#集群角色有哪些？" class="headerlink" title="集群角色有哪些？"></a>集群角色有哪些？</h2><h3 id="leader"><a href="#leader" class="headerlink" title="leader"></a>leader</h3><ol>
<li>事务请求的唯一调度者和处理者，保证集群事务的处理顺序</li>
<li>集群内部服务的调度者</li>
</ol>
<h3 id="follower"><a href="#follower" class="headerlink" title="follower"></a>follower</h3><ol>
<li>处理非事务请求，以及转发事务请求到leader</li>
<li>参与事务请求提议的投票</li>
<li>参与leader选举的投票</li>
</ol>
<h3 id="observer"><a href="#observer" class="headerlink" title="observer"></a>observer</h3><ol>
<li>观察集群中最新状态的变化并同步到observer服务器上</li>
<li>增加observer不影响集群事务处理能力，还能提升非事务请求的处理能力</li>
</ol>
<h2 id="zookeeper集群为什么是奇数？"><a href="#zookeeper集群为什么是奇数？" class="headerlink" title="zookeeper集群为什么是奇数？"></a>zookeeper集群为什么是奇数？</h2><p>zookeeper事务请求提议需要超过半数的机器，假如是2(n+1)台,需要n+2台机器同意，<br>由于在增删改操作中需要半数以上服务器通过，来分析以下情况。<br>2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉<br>3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉<br>4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉<br>5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉<br>6台服务器，至少3台正常运行才行（6的半数为3，半数以上最少为4），正常运行可以允许2台服务器挂掉</p>
<h2 id="zookeeper日志管理？"><a href="#zookeeper日志管理？" class="headerlink" title="zookeeper日志管理？"></a>zookeeper日志管理？</h2><h2 id="leader选举的原理"><a href="#leader选举的原理" class="headerlink" title="leader选举的原理"></a>leader选举的原理</h2><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 为什么使用Zookeeper？：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;随着大型互联网的发展，分布式系统应用越来越来越广泛，zookeeper成了分布式系统的标配。集群容错，动态负载均衡，动态扩容，异地多活等架构都依赖于zookeeper而搭建。&lt;br&gt;
    
    </summary>
    
      <category term="分布式架构" scheme="http://geeksblog.cc/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="zookeeper" scheme="http://geeksblog.cc/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>查找链表倒数第N个元素</title>
    <link href="http://geeksblog.cc/descNode.html"/>
    <id>http://geeksblog.cc/descNode.html</id>
    <published>2018-02-16T13:45:45.000Z</published>
    <updated>2018-03-26T14:46:06.679Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 查找链表倒数第N个元素：</strong> <Excerpt in index | 首页摘要><br>链表应用很广泛，有单向链表，双向链表。单向链表如何查找倒数第n个元素呢？本文以java代码实现链表反向查找。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="单向链表的定义"><a href="#单向链表的定义" class="headerlink" title="单向链表的定义"></a>单向链表的定义</h2><p>单向链表，主要有数据存储，下一个节点的引用这两个元素组成。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class <span class="keyword">Node</span> <span class="title">&#123;</div><div class="line">    int</span> value;</div><div class="line">    <span class="keyword">Node</span> <span class="title">next</span>;</div><div class="line"></div><div class="line">    <span class="keyword">Node</span><span class="title">(int</span> value) &#123;</div><div class="line">        this.value = value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="遍历倒数第n个元素"><a href="#遍历倒数第n个元素" class="headerlink" title="遍历倒数第n个元素"></a>遍历倒数第n个元素</h2><p>在查找过程中，设置两个指针，让其中一个指针比另一个指针先前移k-1步，<br>然后两个指针同时往前移动。循环直到先行的指针指为NULL时，另一个指针所指的位置就是所要找的位置<br>算法复杂度为o（n）</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Node findDescEle(Node head, <span class="keyword">int</span> k) &#123;</div><div class="line">    <span class="keyword">if</span> (k &lt; <span class="number">1</span> || head == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    Node p1 = head;</div><div class="line">    Node p2 = head;</div><div class="line">    <span class="comment">//前移k-1步</span></div><div class="line">    <span class="keyword">int</span> <span class="keyword">step</span> = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</div><div class="line">        <span class="keyword">step</span>++;</div><div class="line">        <span class="keyword">if</span> (p1.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</div><div class="line">            p1 = p1.<span class="keyword">next</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">step</span>++;</div><div class="line">        p1 = p1.<span class="keyword">next</span>;</div><div class="line">        p2 = p2.<span class="keyword">next</span>;</div><div class="line">    &#125;</div><div class="line">    System.out.<span class="keyword">println</span>(<span class="string">"o(n)=="</span> + <span class="keyword">step</span>);</div><div class="line">    <span class="keyword">return</span> p2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>查找链表倒数第n个元素，复杂度为o(n),使用两个指针即可简单实现。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 查找链表倒数第N个元素：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;链表应用很广泛，有单向链表，双向链表。单向链表如何查找倒数第n个元素呢？本文以java代码实现链表反向查找。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Sprigmvc项目转为springboot</title>
    <link href="http://geeksblog.cc/sprigmvc2boot.html"/>
    <id>http://geeksblog.cc/sprigmvc2boot.html</id>
    <published>2018-02-06T14:12:55.000Z</published>
    <updated>2018-02-06T15:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Sprigmvc项目转为springboot：</strong> <Excerpt in index | 首页摘要><br>是否有老掉牙的springmvc项目，想转成springboot项目，看这个文章就对了。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>如果你的项目连maven项目都不是，请自行转为maven项目，在按照本教程进行。</li>
<li>本教程适用于spring+springmvc+mybatis+shiro的maven项目。</li>
</ul>
<h2 id="1-修改pom文件依赖"><a href="#1-修改pom文件依赖" class="headerlink" title="1.修改pom文件依赖"></a>1.修改pom文件依赖</h2><ol>
<li><p>删除之前的spring依赖，添加springboot依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- 这个是剔除掉自带的 tomcat部署的--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- tomcat容器部署 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--&lt;scope&gt;compile&lt;/scope&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 支持 @ConfigurationProperties 注解 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加springboot构建插件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2-添加application启动文件"><a href="#2-添加application启动文件" class="headerlink" title="2.添加application启动文件"></a>2.添加application启动文件</h2><p>注意，如果Application在controller，service，dao的上一层包里，无需配置<code>@ComponentScan</code>,<br>否则，需要指明要扫描的包。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="comment">//@ComponentScan(&#123;"com.cms.controller","com.cms.service","com.cms.dao"&#125;)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(Application.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-添加springboot配置文件"><a href="#3-添加springboot配置文件" class="headerlink" title="3.添加springboot配置文件"></a>3.添加springboot配置文件</h2><ol>
<li>在resources下面添加application.properties文件</li>
<li>添加基本配置<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#默认前缀</span></div><div class="line">server.<span class="attr">contextPath=/</span></div><div class="line"><span class="comment"># 指定环境</span></div><div class="line">spring.profiles.<span class="attr">active=local</span></div><div class="line"><span class="comment"># jsp配置</span></div><div class="line">spring.mvc.view.<span class="attr">prefix=/WEB-INF/jsp/</span></div><div class="line">spring.mvc.view.<span class="attr">suffix=.jsp</span></div><div class="line"><span class="comment">#log配置文件</span></div><div class="line">logging.<span class="attr">config=classpath:logback-cms.xml</span></div><div class="line"><span class="comment">#log路径</span></div><div class="line">logging.<span class="attr">path=/Users/mac/work-tommy/cms-springboot/logs/</span></div><div class="line"><span class="comment">#数据源</span></div><div class="line">spring.datasource.<span class="attr">name=adminDataSource</span></div><div class="line">spring.datasource.<span class="attr">driverClassName</span> = com.mysql.jdbc.Driver</div><div class="line">spring.datasource.<span class="attr">url</span> = jdbc:mysql://localhost:<span class="number">3306</span>/mycms?<span class="attr">useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=utf-8</span></div><div class="line">spring.datasource.<span class="attr">username</span> = root</div><div class="line">spring.datasource.<span class="attr">password</span> = <span class="number">123456</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="4-使用-Configuration注入配置"><a href="#4-使用-Configuration注入配置" class="headerlink" title="4.使用@Configuration注入配置"></a>4.使用@Configuration注入配置</h2><ol>
<li><p>注入mybatis配置,分页插件请自主选择</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.kuwo.dao"</span>,sqlSessionTemplateRef  = <span class="string">"adminSqlSessionTemplate"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminDataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"adminDataSource"</span>)</div><div class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">adminDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"adminSqlSessionFactory"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">adminSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"adminDataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line">        bean.setDataSource(dataSource);</div><div class="line">        <span class="comment">//分页插件</span></div><div class="line"><span class="comment">//        PageHelper pageHelper = new PageHelper();</span></div><div class="line">        PagePlugin pagePlugin = <span class="keyword">new</span> PagePlugin();</div><div class="line"><span class="comment">//        Properties props = new Properties();</span></div><div class="line"><span class="comment">//        props.setProperty("reasonable", "true");</span></div><div class="line"><span class="comment">//        props.setProperty("supportMethodsArguments", "true");</span></div><div class="line"><span class="comment">//        props.setProperty("returnPageInfo", "check");</span></div><div class="line"><span class="comment">//        props.setProperty("params", "count=countSql");</span></div><div class="line"><span class="comment">//        pageHelper.setProperties(props);</span></div><div class="line">        <span class="comment">//添加插件</span></div><div class="line">        bean.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;pagePlugin&#125;);</div><div class="line">        <span class="comment">// 添加mybatis配置文件</span></div><div class="line">        bean.setConfigLocation(<span class="keyword">new</span> DefaultResourceLoader().getResource(<span class="string">"classpath:mybatis/mybatis-config.xml"</span>));</div><div class="line">        <span class="comment">// 添加mybatis映射文件</span></div><div class="line">        bean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:mybatis/system/*.xml"</span>));</div><div class="line">        <span class="keyword">return</span> bean.getObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"adminTransactionManager"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">adminTransactionManager</span><span class="params">(@Qualifier(<span class="string">"adminDataSource"</span>)</span> DataSource dataSource) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"adminSqlSessionTemplate"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">adminSqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"adminSqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>添加Interceptor配置,注意addInterceptor的顺序，不要搞乱了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>添加shiro配置文件</p>
<ul>
<li>注意：本来使用redis做session缓存，但是和shiro集成发现一个问题，user对象存储以后，从shiro中获取后，无法进行类型转换，所以暂时放弃了redis做session缓存。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String host;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.timeout&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LifecycleBeanPostProcessor <span class="title">getLifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * ShiroFilterFactoryBean 处理拦截资源文件问题。</div><div class="line">     * 注意：单独一个ShiroFilterFactoryBean配置是或报错的，因为在</div><div class="line">     * 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager</div><div class="line">     *</div><div class="line">     Filter Chain定义说明</div><div class="line">     1、一个URL可以配置多个Filter，使用逗号分隔</div><div class="line">     2、当设置多个过滤器时，全部验证通过，才视为通过</div><div class="line">     3、部分过滤器可指定参数，如perms，roles</div><div class="line">     *</div><div class="line">     */</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"ShiroConfiguration.shirFilter()"</span>);</div><div class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean  = <span class="keyword">new</span> ShiroFilterFactoryBean();</div><div class="line"></div><div class="line">        <span class="comment">// 必须设置 SecurityManager</span></div><div class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</div><div class="line">        <span class="comment">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面</span></div><div class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login_toLogin"</span>);</div><div class="line">        <span class="comment">// 登录成功后要跳转的链接</span></div><div class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/usersPage"</span>);</div><div class="line">        <span class="comment">//未授权界面;</span></div><div class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/403"</span>);</div><div class="line">        <span class="comment">//拦截器.</span></div><div class="line">        Map&lt;String,String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">//配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span></div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/login_toLogin"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/login_login"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/static/login/**"</span>,<span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/static/js/**"</span>,<span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/uploadFiles/uploadImgs/**"</span>,<span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/code.do"</span>,<span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/font-awesome/**"</span>,<span class="string">"anon"</span>);</div><div class="line">        <span class="comment">//&lt;!-- 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span></div><div class="line">        <span class="comment">//&lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span></div><div class="line"></div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</div><div class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</div><div class="line">        DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</div><div class="line">        <span class="comment">//设置realm.</span></div><div class="line">        securityManager.setRealm(myShiroRealm());</div><div class="line">        <span class="comment">// 自定义缓存实现 使用redis</span></div><div class="line">        <span class="comment">//securityManager.setCacheManager(cacheManager());</span></div><div class="line">        <span class="comment">// 自定义session管理 使用redis</span></div><div class="line">        securityManager.setSessionManager(sessionManager());</div><div class="line">        <span class="keyword">return</span> securityManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ShiroRealm <span class="title">myShiroRealm</span><span class="params">()</span></span>&#123;</div><div class="line">        ShiroRealm myShiroRealm = <span class="keyword">new</span> ShiroRealm();</div><div class="line"><span class="comment">//        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span></div><div class="line">        <span class="keyword">return</span> myShiroRealm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">    <span class="comment">/**</div><div class="line">     *  开启shiro aop注解支持.</div><div class="line">     *  使用代理方式;所以需要开启代码支持;</div><div class="line">     * <span class="doctag">@param</span> securityManager</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</div><div class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</div><div class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</div><div class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * 配置shiro redisManager</div><div class="line">     * 使用的是shiro-redis开源插件</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisManager <span class="title">redisManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisManager redisManager = <span class="keyword">new</span> RedisManager();</div><div class="line">        redisManager.setHost(host);</div><div class="line">        redisManager.setPort(port);</div><div class="line">        redisManager.setExpire(<span class="number">1800</span>);</div><div class="line">        redisManager.setTimeout(timeout);</div><div class="line">        <span class="comment">// redisManager.setPassword(password);</span></div><div class="line">        <span class="keyword">return</span> redisManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * cacheManager 缓存 redis实现</div><div class="line">     * 使用的是shiro-redis开源插件</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager();</div><div class="line">        redisCacheManager.setRedisManager(redisManager());</div><div class="line">        <span class="keyword">return</span> redisCacheManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * RedisSessionDAO shiro sessionDao层的实现 通过redis</div><div class="line">     * 使用的是shiro-redis开源插件</div><div class="line">     */</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisSessionDAO <span class="title">redisSessionDAO</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisSessionDAO redisSessionDAO = <span class="keyword">new</span> RedisSessionDAO();</div><div class="line">        redisSessionDAO.setRedisManager(redisManager());</div><div class="line">        <span class="keyword">return</span> redisSessionDAO;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSessionManager <span class="title">sessionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</div><div class="line"><span class="comment">//        sessionManager.setSessionDAO(redisSessionDAO());</span></div><div class="line">        <span class="keyword">return</span> sessionManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>搞了一天时间把项目转成springboot，查阅各种资料，希望这篇文章能够为你带来帮助。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Sprigmvc项目转为springboot：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;是否有老掉牙的springmvc项目，想转成springboot项目，看这个文章就对了。&lt;br&gt;
    
    </summary>
    
      <category term="项目实战" scheme="http://geeksblog.cc/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="java" scheme="http://geeksblog.cc/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Generator</title>
    <link href="http://geeksblog.cc/mybatis-generator.html"/>
    <id>http://geeksblog.cc/mybatis-generator.html</id>
    <published>2018-01-28T09:30:19.000Z</published>
    <updated>2018-01-28T09:40:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Mybatis-Generator：</strong> <Excerpt in index | 首页摘要><br>mybatis反向生成器，根据数据库表，自动创建pojo，mapper以及mybatis配置文件，能极大的提高开发效率。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><p>本插件fork自<a href="http://link">mybatis-generator-gui</a>,在此基础上加了批量生成表。</p>
<h2 id="插件特性"><a href="#插件特性" class="headerlink" title="插件特性"></a>插件特性</h2><ol>
<li>保存数据库配置</li>
<li>根据表生成pojo，mapper以及mybatis配置文件</li>
<li>批量生成</li>
<li>其它功能（待开发）</li>
</ol>
<h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>本工具由于使用了Java 8的众多特性，所以要求JDK <strong>1.8.0.60</strong>以上版本，对于JDK版本还没有升级的童鞋表示歉意。</p>
<h3 id="启动本软件"><a href="#启动本软件" class="headerlink" title="启动本软件"></a>启动本软件</h3><ul>
<li>方法一: 自助构建</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/maochunguang/mybatis-generator-gui</div><div class="line"><span class="built_in">cd</span> mybatis-generator-gui</div><div class="line">mvn jfx:jar</div><div class="line"><span class="built_in">cd</span> target/jfx/app/</div><div class="line">java -jar mybatis-generator-gui.jar</div></pre></td></tr></table></figure>
<ul>
<li>方法二: IDE中运行Eclipse or IntelliJ IDEA中启动, 找到<code>com.zzg.mybatis.generator.MainUI</code>类并运行就可以了</li>
</ul>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>更多详细文档请参考本库的Wiki</p>
<ul>
<li><a href="https://github.com/maochunguang/mybatis-generator-gui/wiki">Usage</a></li>
</ul>
<h2 id="截图参考"><a href="#截图参考" class="headerlink" title="截图参考"></a>截图参考</h2><p><img src="http://o7kalf5h3.bkt.clouddn.com/mybatis.png" alt="MainUI"></p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Mybatis-Generator：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;mybatis反向生成器，根据数据库表，自动创建pojo，mapper以及mybatis配置文件，能极大的提高开发效率。&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://geeksblog.cc/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="mysql" scheme="http://geeksblog.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第11天-红黑树</title>
    <link href="http://geeksblog.cc/suanfa-11.html"/>
    <id>http://geeksblog.cc/suanfa-11.html</id>
    <published>2017-10-30T14:35:37.000Z</published>
    <updated>2018-01-28T09:25:15.224Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第11天-红黑树：</strong> <Excerpt in index | 首页摘要><br>红黑树<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>本文的主要内容：</p>
<ol>
<li>红黑树的基本概念以及最重要的 5 点规则。</li>
<li>红黑树的左旋转、右旋转、重新着色的原理与 Java 实现；</li>
<li>红黑树的增加结点、删除结点过程解析；</li>
</ol>
<h2 id="红黑树的基本概念与数据结构表示"><a href="#红黑树的基本概念与数据结构表示" class="headerlink" title="红黑树的基本概念与数据结构表示"></a>红黑树的基本概念与数据结构表示</h2><p>首先红黑树来个定义：</p>
<blockquote>
<p>红黑树定义：红黑树又称红 - 黑二叉树，它首先是一颗二叉树，它具体二叉树所有的特性。同时红黑树更是一颗自平衡的排序二叉树 (平衡二叉树的一种实现方式)。</p>
</blockquote>
<p>我们知道一颗基本的二叉排序树他们都需要满足一个基本性质：即树中的任何节点的值大于它的左子节点，且小于它的右子节点。</p>
<p>按照这个基本性质使得树的检索效率大大提高。我们知道在生成二叉排序树的过程是非常容易失衡的，最坏的情况就是一边倒（只有右 / 左子树），这样势必会导致二叉树的检索效率大大降低（O(n)），所以为了维持二叉排序树的平衡，大牛们提出了各种平衡二叉树的实现算法，如：AVL，SBT，伸展树，TREAP ，红黑树等等。</p>
<blockquote>
<p>平衡二叉树必须具备如下特性：它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。也就是说该二叉树的任何一个子节点，其左右子树的高度都相近。下面给出平衡二叉树的几个示意图：</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20170110134212154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="红黑树"></p>
<p>红黑树顾名思义就是结点是红色或者是黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。对于一棵有效的红黑树而言我们必须增加如下规则，这也是红黑树最重要的 5 点规则：</p>
<ol>
<li>每个结点都只能是红色或者黑色中的一种。</li>
<li>根结点是黑色的。</li>
<li>每个叶结点（NIL 节点，空节点）是黑色的。</li>
<li>如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。</li>
<li>从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。</li>
</ol>
<p>这些约束强制了红黑树的关键性质: 从根到叶子最长的可能路径不多于最短的可能路径的两倍长。结果是这棵树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。所以红黑树它是复杂而高效的，其检索效率 O(lg n)。下图为一颗典型的红黑二叉树：<br><img src="http://img.blog.csdn.net/20170110134903553?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>上面关于红黑树的概念基本已经说得很清楚了，下面给出红黑树的结点用 Java 表示数据结构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">true</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">private</span> Node root;<span class="comment">//二叉查找树的根节点</span></div><div class="line"></div><div class="line"><span class="comment">//结点数据结构</span></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Key key;<span class="comment">//键</span></div><div class="line">    <span class="keyword">private</span> Value value;<span class="comment">//值</span></div><div class="line">    <span class="keyword">private</span> Node left, right;<span class="comment">//指向子树的链接:左子树和右子树.</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;<span class="comment">//以该节点为根的子树中的结点总数</span></div><div class="line">    <span class="keyword">boolean</span> color;<span class="comment">//由其父结点指向它的链接的颜色也就是结点颜色.</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value value, <span class="keyword">int</span> N, <span class="keyword">boolean</span> color)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.N = N;</div><div class="line">        <span class="keyword">this</span>.color = color;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</div><div class="line"> * 获取整个二叉查找树的大小</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> size(root);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</div><div class="line"> * 获取某一个结点为根结点的二叉查找树的大小</div><div class="line"> * <span class="doctag">@param</span> x</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> x.N;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(Node x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x.color == RED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="红黑树的三个基本操作"><a href="#红黑树的三个基本操作" class="headerlink" title="红黑树的三个基本操作"></a>红黑树的三个基本操作</h2><p>红黑树在插入，删除过程中可能会破坏原本的平衡条件导致不满足红黑树的性质，这时候一般情况下要通过左旋、右旋和重新着色这个三个操作来使红黑树重新满足平衡化条件。</p>
<h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>旋转分为左旋和右旋。在我们实现某些操作中可能会出现红色右链接或则两个连续的红链接，这时候就要通过旋转修复。</p>
<p>通常左旋操作用于将一个向右倾斜的红色链接 (这个红色链接链连接的两个结点均是红色结点) 旋转为向左链接。对比操作前后，可以看出，该操作实际上是将红线链接的两个结点中的一个较大的结点移动到根结点上。</p>
<p>左旋的示意图如下：<br><img src="http://img.blog.csdn.net/20170110141248765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><img src="http://img.blog.csdn.net/20170110141309245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>左旋的 Java 实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * 左旋转</div><div class="line"> * <span class="doctag">@param</span> h</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateLeft</span><span class="params">(Node h)</span></span>&#123;</div><div class="line">    Node x = h.right;</div><div class="line">    <span class="comment">//把x的左结点赋值给h的右结点</span></div><div class="line">    h.right = x.left;</div><div class="line">    <span class="comment">//把h赋值给x的左结点</span></div><div class="line">    x.left = h;</div><div class="line">    <span class="comment">//</span></div><div class="line">    x.color = h.color;</div><div class="line">    h.color = RED;</div><div class="line">    x.N = h.N;</div><div class="line">    h.N = <span class="number">1</span>+ size(h.left) + size(h.right);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>左旋的动画效果如下：<br><img src="http://img.blog.csdn.net/20170110142027660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>右旋其实就是左旋的逆操作：<br><img src="http://img.blog.csdn.net/20170110142230957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br><img src="http://img.blog.csdn.net/20170110142252648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>右旋的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * 右旋转</div><div class="line"> * <span class="doctag">@param</span> h</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateRight</span><span class="params">(Node h)</span></span>&#123;</div><div class="line">    Node x = h.left;</div><div class="line">    h.left = x.right;</div><div class="line">    x.right = h;</div><div class="line"></div><div class="line">    x.color = h.color;</div><div class="line">    h.color = RED;</div><div class="line">    x.N = h.N;</div><div class="line">    h.N = <span class="number">1</span>+ size(h.left) + size(h.right);</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>右旋的动态示意图：<br><img src="http://img.blog.csdn.net/20170110142410322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="颜色反转"><a href="#颜色反转" class="headerlink" title="颜色反转"></a><a></a>颜色反转</h2><p>当出现一个临时的 4-node 的时候，即一个节点的两个子节点均为红色，如下图：<br><img src="http://img.blog.csdn.net/20170110143015321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>我们需要将 E 提升至父节点，操作方法很简单，就是把 E 对子节点的连线设置为黑色，自己的颜色设置为红色。颜色反转之后颜色如下：<br><img src="http://img.blog.csdn.net/20170110143225712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * 颜色转换</div><div class="line"> * <span class="doctag">@param</span> h</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flipColors</span><span class="params">(Node h)</span></span>&#123;</div><div class="line">    h.color = RED;<span class="comment">//父结点颜色变红</span></div><div class="line">    h.left.color = BLACK;<span class="comment">//子结点颜色变黑</span></div><div class="line">    h.right.color = BLACK;<span class="comment">//子结点颜色变黑</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：以上的旋转和颜色反转操作都是针对单一结点的，反转或则颜色反转操作之后可能引起其父结点又不满足平衡性质。</p>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第11天-红黑树：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;红黑树&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第10天-二叉树</title>
    <link href="http://geeksblog.cc/suanfa-10.html"/>
    <id>http://geeksblog.cc/suanfa-10.html</id>
    <published>2017-10-29T13:17:09.000Z</published>
    <updated>2017-10-30T14:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第10天-二叉树：</strong> <Excerpt in index | 首页摘要><br>用java实现算法求出二叉树的高度<br><a id="more"></a></p>
<p><The rest of contents | 余下全文></p>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><ul>
<li>先序遍历：先访问根结点，然后左节点，最后右节点</li>
<li>中序遍历：先访问左结点，然后根节点，最后右节点</li>
<li>后续遍历：先访问左结点，然后右节点，最后根节点</li>
</ul>
<h2 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">    TreeNode left;</div><div class="line">    TreeNode right;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line"></div><div class="line">    TreeNode(<span class="keyword">int</span> val) &#123;</div><div class="line">        <span class="keyword">this</span>.val = val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</div><div class="line">        TreeNode left1 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</div><div class="line">        TreeNode left2 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</div><div class="line">        TreeNode right1 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</div><div class="line">        <span class="comment">//创建一棵树</span></div><div class="line">        root.left = left1;</div><div class="line">        left1.right = left2;</div><div class="line">        root.right = right1;</div><div class="line">        scanNodes(root);</div><div class="line">        System.out.println(<span class="string">"树的深度是："</span> + getDepth(root));</div><div class="line">        System.out.println(<span class="string">"非递归深度："</span> + findDeep2(root));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 递归返回二叉树的深度</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> left = getDepth(root.left);</div><div class="line">        <span class="keyword">int</span> right = getDepth(root.right);</div><div class="line">        <span class="keyword">return</span> left &gt; right ? left + <span class="number">1</span> : right + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scanNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        System.out.println(root.val); //先序遍历</span></div><div class="line">        scanNodes(root.left);</div><div class="line"><span class="comment">//        System.out.println(root.val); //中序遍历</span></div><div class="line">        scanNodes(root.right);</div><div class="line">        System.out.println(root.val); <span class="comment">// 后序遍历</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 非递归求深度</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findDeep2</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        TreeNode current = <span class="keyword">null</span>;</div><div class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        queue.offer(root);</div><div class="line">        <span class="keyword">int</span> cur, next;</div><div class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">            cur = <span class="number">0</span>;</div><div class="line">            <span class="comment">//当遍历完当前层以后，队列里元素全是下一层的元素，队列的长度是这一层的节点的个数</span></div><div class="line">            next = queue.size();</div><div class="line">            <span class="keyword">while</span> (cur &lt; next) &#123;</div><div class="line">                current = queue.poll();</div><div class="line">                cur++;</div><div class="line">                <span class="comment">//把当前节点的左右节点入队（如果存在的话）  </span></div><div class="line">                <span class="keyword">if</span> (current.left != <span class="keyword">null</span>) &#123;</div><div class="line">                    queue.offer(current.left);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (current.right != <span class="keyword">null</span>) &#123;</div><div class="line">                    queue.offer(current.right);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            level++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> level;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="树的变种"><a href="#树的变种" class="headerlink" title="树的变种"></a>树的变种</h2><p>二叉查找树，平衡二叉查找树，红黑树，b树<br>红黑树和平衡二叉树（AVL树）类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。红黑树和AVL树的区别在于它使用颜色来标识结点的高度，它所追求的是局部平衡而不是AVL树中的非常严格的平衡。<br>由于二叉树的效率和深度息息相关，于是出现了多路的B树，B+树等等。b树是叶子为n的平衡树。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第10天-二叉树：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;用java实现算法求出二叉树的高度&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第九天-排序算法比较</title>
    <link href="http://geeksblog.cc/suanfa-9.html"/>
    <id>http://geeksblog.cc/suanfa-9.html</id>
    <published>2017-10-28T15:10:58.000Z</published>
    <updated>2017-10-29T13:02:02.596Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第九天-排序算法比较：</strong> <Excerpt in index | 首页摘要><br>排序算法个有千秋，有的性能高，有的性能很低。这就要求我们对常用的排序算法要全面了解，不要用错了算法，导致性能问题。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="排序算法性能比较·"><a href="#排序算法性能比较·" class="headerlink" title="排序算法性能比较·"></a>排序算法性能比较·</h2><p>借一张网路上的比较图。特别直观。<br><img src="http://o7kalf5h3.bkt.clouddn.com/sortcom.jpg" alt="算法比较"></p>
<h2 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h2><p>个人看法：</p>
<ul>
<li>一般的情况还是以快速排序为主，</li>
<li>对于多个有序的数组合并的情况使用归并排序</li>
<li>性能要求快，空间足够，待排序的元素都要在一定的范围内使用桶排序</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第九天-排序算法比较：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;排序算法个有千秋，有的性能高，有的性能很低。这就要求我们对常用的排序算法要全面了解，不要用错了算法，导致性能问题。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第八天-桶排序</title>
    <link href="http://geeksblog.cc/suanfa-8.html"/>
    <id>http://geeksblog.cc/suanfa-8.html</id>
    <published>2017-10-27T14:51:06.000Z</published>
    <updated>2017-10-28T15:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第八天-桶排序：</strong> <Excerpt in index | 首页摘要><br>桶排序是个神奇的排序，在某些情况下可以达到O(N)的复杂度，快的离谱。但是桶排序是利用空间换时间，在空间充足的情况下，可以用桶排序进行高效的排序。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="桶排序的基本原理"><a href="#桶排序的基本原理" class="headerlink" title="桶排序的基本原理"></a>桶排序的基本原理</h2><p>将阵列分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递回方式继续使用桶排序进行排序）。当要被排序的阵列内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(nlogn) 下限的影响， 简单来说，就是把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序</p>
<h2 id="桶排序的java实现"><a href="#桶排序的java实现" class="headerlink" title="桶排序的java实现"></a>桶排序的java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucketSort1</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</div><div class="line">        <span class="comment">//分桶，这里采用映射函数f(x)=x/10。</span></div><div class="line">        <span class="keyword">int</span> bucketCount =<span class="number">10</span>;</div><div class="line">        Integer[][] bucket = <span class="keyword">new</span> Integer[bucketCount][arr.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</div><div class="line">            <span class="keyword">int</span> quotient = arr[i]/<span class="number">10</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length; j++)&#123;</div><div class="line">                <span class="keyword">if</span> (bucket[quotient][j]==<span class="keyword">null</span>)&#123;</div><div class="line">                    bucket[quotient][j]=arr[i];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//小桶排序</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;bucket.length; i++)&#123;</div><div class="line">            <span class="comment">//insertion sort</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;bucket[i].length; ++j)&#123;</div><div class="line">                <span class="keyword">if</span>(bucket[i][j]==<span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> value = bucket[i][j];</div><div class="line">                <span class="keyword">int</span> position=j;</div><div class="line">                <span class="keyword">while</span> (position&gt;<span class="number">0</span> &amp;&amp; bucket[i][position-<span class="number">1</span>]&gt;value)&#123;</div><div class="line">                    bucket[i][position] = bucket[i][position-<span class="number">1</span>];</div><div class="line">                    position--;</div><div class="line">                &#125;</div><div class="line">                bucket[i][position] = value;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//输出</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, index=<span class="number">0</span>; i&lt;bucket.length; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;bucket[i].length; j++)&#123;</div><div class="line">                <span class="keyword">if</span> (bucket[i][j]!=<span class="keyword">null</span>)&#123;</div><div class="line">                    arr[index] = bucket[i][j];</div><div class="line">                    index++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>前面说的几大排序算法 ，大部分时间复杂度都是O（n2），也有部分排序算法时间复杂度是O(nlogn)。而桶式排序却能实现O（n）的时间复杂度。<br>但桶排序的缺点是：</p>
<ol>
<li>首先是空间复杂度比较高，需要的额外开销大。排序有两个数组的空间开销，一个存放待排序数组，一个就是所谓的桶，比如待排序值是从0到m-1，那就需要m个桶，这个桶数组就要至少m个空间。</li>
<li>其次待排序的元素都要在一定的范围内，限制较多。</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第八天-桶排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;桶排序是个神奇的排序，在某些情况下可以达到O(N)的复杂度，快的离谱。但是桶排序是利用空间换时间，在空间充足的情况下，可以用桶排序进行高效的排序。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第七天-堆排序</title>
    <link href="http://geeksblog.cc/suanfa-7.html"/>
    <id>http://geeksblog.cc/suanfa-7.html</id>
    <published>2017-10-26T14:50:57.000Z</published>
    <updated>2017-10-27T00:38:41.817Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第七天-堆排序：</strong> <Excerpt in index | 首页摘要><br>堆排序是利用二叉树的原理实现的一种排序，难点在于要构建堆,构建堆一般可以采用下沉或者上浮的算法进行。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="堆排序的基本原理"><a href="#堆排序的基本原理" class="headerlink" title="堆排序的基本原理"></a>堆排序的基本原理</h2><p>初始时把要排序的n个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到n 个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面(n-1)个元素重新调整使之成为堆，输出堆顶元素，得到n 个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。称这个过程为堆排序。<br>因此，实现堆排序需解决两个问题：</p>
<ol>
<li>如何将n 个待排序的数建成堆；</li>
<li>输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。</li>
</ol>
<h2 id="堆排序java实现"><a href="#堆排序java实现" class="headerlink" title="堆排序java实现"></a>堆排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = a.length;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = n / <span class="number">2</span>; k &gt;= <span class="number">1</span>; k--)</div><div class="line">            sink(a, k, n);</div><div class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</div><div class="line">            swap(a, <span class="number">1</span>, n--);</div><div class="line">            sink(a, <span class="number">1</span>, n);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= n) &#123;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">2</span> * k;</div><div class="line">        <span class="keyword">if</span> (j &lt; n &amp;&amp; a[j - <span class="number">1</span>] &lt; a[j + <span class="number">1</span> - <span class="number">1</span>]) j++;</div><div class="line">        <span class="keyword">if</span> (a[k - <span class="number">1</span>] &gt;= a[j - <span class="number">1</span>]) <span class="keyword">break</span>;</div><div class="line">        swap(a, k, j);</div><div class="line">        k = j;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> swap = a[i - <span class="number">1</span>];</div><div class="line">    a[i - <span class="number">1</span>] = a[j - <span class="number">1</span>];</div><div class="line">    a[j - <span class="number">1</span>] = swap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">8</span>&#125;;</div><div class="line">    sort(arr);</div><div class="line">    System.out.println(<span class="string">"排序之后："</span>);</div><div class="line">    System.out.println(Arrays.toString(arr));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>堆排序的平均时间复杂度为Ο(nlogn)</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第七天-堆排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;堆排序是利用二叉树的原理实现的一种排序，难点在于要构建堆,构建堆一般可以采用下沉或者上浮的算法进行。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第六天-冒泡排序</title>
    <link href="http://geeksblog.cc/suanfa-6.html"/>
    <id>http://geeksblog.cc/suanfa-6.html</id>
    <published>2017-10-25T14:06:06.000Z</published>
    <updated>2017-10-27T00:38:35.615Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第六天-冒泡排序：</strong> <Excerpt in index | 首页摘要><br>冒泡排序也非常简单，效率比较低。了解即可。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="冒泡排序的原理"><a href="#冒泡排序的原理" class="headerlink" title="冒泡排序的原理"></a>冒泡排序的原理</h2><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p>
<p><img src="http://o7kalf5h3.bkt.clouddn.com/bubbleSort.jpg" alt="冒泡排序图"></p>
<h2 id="冒泡排序的java实现"><a href="#冒泡排序的java实现" class="headerlink" title="冒泡排序的java实现"></a>冒泡排序的java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; ++j) &#123;</div><div class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</div><div class="line">                <span class="keyword">int</span> tmp = a[j];</div><div class="line">                a[j] = a[j + <span class="number">1</span>];</div><div class="line">                a[j + <span class="number">1</span>] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>冒泡排序的复杂度为O(n^2)</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第六天-冒泡排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;冒泡排序也非常简单，效率比较低。了解即可。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第五天-选择排序</title>
    <link href="http://geeksblog.cc/suanfa-5.html"/>
    <id>http://geeksblog.cc/suanfa-5.html</id>
    <published>2017-10-24T13:46:33.000Z</published>
    <updated>2017-10-24T15:51:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第五天-选择排序：</strong> <Excerpt in index | 首页摘要><br>选择排序很简单，属于交换排序算法。通过比较找到最大值或最小值，然后进行交换。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="选择排序的原理"><a href="#选择排序的原理" class="headerlink" title="选择排序的原理"></a>选择排序的原理</h2><p>首先找到数组中最小的元素，与数组第一个元素交换，然后在剩下的元素中选择最小的，与第二个元素交换，以此类推，直到排序完成。<br><img src="http://o7kalf5h3.bkt.clouddn.com/selectSort.jpg" alt="选择排序图"></p>
<h2 id="选择排序的java实现"><a href="#选择排序的java实现" class="headerlink" title="选择排序的java实现"></a>选择排序的java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = a.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; (a[j] &lt; a[j - <span class="number">1</span>]); j--) &#123;</div><div class="line">            swap(a, j, j - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> swap = a[i];</div><div class="line">    a[i] = a[j];</div><div class="line">    a[j] = swap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>选择排序的算法复杂度是O(n^2)</p>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ol>
<li>每次选择的时候把最大值和最小值都比较出来，双向进行交换排序</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第五天-选择排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;选择排序很简单，属于交换排序算法。通过比较找到最大值或最小值，然后进行交换。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第一天-归并排序</title>
    <link href="http://geeksblog.cc/suanfa-4.html"/>
    <id>http://geeksblog.cc/suanfa-4.html</id>
    <published>2017-10-23T15:56:27.000Z</published>
    <updated>2017-10-24T15:29:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第一天-归并排序：</strong> <Excerpt in index | 首页摘要><br>归并排序是利用分治思想进行排序的典型应用，特别是对几个基本有序的子序列合并时，效率最高。在实际应用中，分布式应用，分布式查询排序会比较多应用到归并排序。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="归并排序的原理"><a href="#归并排序的原理" class="headerlink" title="归并排序的原理"></a>归并排序的原理</h2><p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br>归并排序分为两种种，第一种是自底向上的归并。</p>
<p>第二种是自顶向下的归并。</p>
<h2 id="自底向上的归并排序java实现"><a href="#自底向上的归并排序java实现" class="headerlink" title="自底向上的归并排序java实现"></a>自底向上的归并排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortBU</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">        <span class="comment">// 复制到aux[]</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class="line">            aux[k] = a[k];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 合并回 a[]</span></div><div class="line">        <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) a[k] = aux[i++];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (aux[j] &lt; aux[i]) a[k] = aux[j++];</div><div class="line">            <span class="keyword">else</span> a[k] = aux[i++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = a.length;</div><div class="line">        <span class="keyword">int</span>[] aux = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; len *= <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; n - len; lo += len + len) &#123;</div><div class="line">                <span class="keyword">int</span> mid = lo + len - <span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> hi = Math.min(lo + len + len - <span class="number">1</span>, n - <span class="number">1</span>);</div><div class="line">                merge(a, aux, lo, mid, hi);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">8</span>&#125;;</div><div class="line">        mergeSort(arr);</div><div class="line">        System.out.println(<span class="string">"排序之后："</span>);</div><div class="line">        System.out.println(Arrays.toString(arr));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自顶向下的归并排序java实现"><a href="#自顶向下的归并排序java实现" class="headerlink" title="自顶向下的归并排序java实现"></a>自顶向下的归并排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (high &lt;= low) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</div><div class="line">        sort(a, low, mid);</div><div class="line">        sort(a, mid + <span class="number">1</span>, high);</div><div class="line">        merge(a, low, mid, high);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">        <span class="comment">// 复制到aux[]</span></div><div class="line">        <span class="keyword">int</span>[] aux = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class="line">            aux[k] = a[k];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 合并回 a[]</span></div><div class="line">        <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) a[k] = aux[i++];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (aux[j] &lt; aux[i]) a[k] = aux[j++];</div><div class="line">            <span class="keyword">else</span> a[k] = aux[i++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>归并排序的算法复杂度是nlgn</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>几个基本有序的数组进行排序</li>
<li>部分有序的数组</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第一天-归并排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;归并排序是利用分治思想进行排序的典型应用，特别是对几个基本有序的子序列合并时，效率最高。在实际应用中，分布式应用，分布式查询排序会比较多应用到归并排序。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第三天-希尔排序</title>
    <link href="http://geeksblog.cc/suanfa-3.html"/>
    <id>http://geeksblog.cc/suanfa-3.html</id>
    <published>2017-10-22T13:51:03.000Z</published>
    <updated>2017-10-22T16:24:45.847Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第三天-希尔排序：</strong> <Excerpt in index | 首页摘要><br>希尔排序平常用的比较少，主要是基于插入排序的改进。但是希尔排序的性能很高，数组越大，性能优势越明显。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="希尔排序的基本原理"><a href="#希尔排序的基本原理" class="headerlink" title="希尔排序的基本原理"></a>希尔排序的基本原理</h2><p>基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。<br>操作方法：</p>
<ol>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1； </li>
<li>按增量序列个数k，对序列进行k 趟排序； </li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ol>
<p><img src="http://o7kalf5h3.bkt.clouddn.com/shellSort.jpg" alt="希尔排序原理图"></p>
<h2 id="希尔排序java实现"><a href="#希尔排序java实现" class="headerlink" title="希尔排序java实现"></a>希尔排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = a.length;</div><div class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (h &lt; n/<span class="number">3</span>) h = <span class="number">3</span>*h + <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// h-sort the array</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; (a[j]&lt; a[j-h]); j -= h) &#123;</div><div class="line">                swap(a, j, j-h);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        h /= <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> swap = a[i];</div><div class="line">    a[i] = a[j];</div><div class="line">    a[j] = swap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，是一个不稳定排序算法</p>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第三天-希尔排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;希尔排序平常用的比较少，主要是基于插入排序的改进。但是希尔排序的性能很高，数组越大，性能优势越明显。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第二天-插入排序</title>
    <link href="http://geeksblog.cc/suanfa-2.html"/>
    <id>http://geeksblog.cc/suanfa-2.html</id>
    <published>2017-10-21T01:41:27.000Z</published>
    <updated>2017-10-22T16:24:49.390Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第二天-插入排序：</strong> <Excerpt in index | 首页摘要><br>今天是突破算法第二天，插入排序，比较简单。效率比较低，但是思想很广泛，应用很广，是很多高级排序算法的一个子过程。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="插入排序的原理"><a href="#插入排序的原理" class="headerlink" title="插入排序的原理"></a>插入排序的原理</h2><p> 将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录<br> 看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。<br> 要点：设立哨兵，作为临时存储和判断数组边界之用</p>
<p><img src="http://o7kalf5h3.bkt.clouddn.com/insert.jpg" alt="插入排序原理"></p>
<h2 id="插入排序java实现"><a href="#插入排序java实现" class="headerlink" title="插入排序java实现"></a>插入排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; (a[j]&lt;a[j-<span class="number">1</span>]); j--) &#123;</div><div class="line">               swap(a, j, j-<span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> swap = a[i];</div><div class="line">       a[i] = a[j];</div><div class="line">       a[j] = swap;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>插入排序的复杂度为O（n^2）</p>
<h2 id="改进方法"><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h2><p>希尔排序，其他的插入排序有二分插入排序，2-路插入排序。</p>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>插入排序比较适合部分有序的数组（以下四种数组）</p>
<ul>
<li>数组中每个元素距离它的最终位置都不远</li>
<li>一个有序的大数组接一个小数组</li>
<li>数组中只有几个位置不正确</li>
<li>数组比较小</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第二天-插入排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;今天是突破算法第二天，插入排序，比较简单。效率比较低，但是思想很广泛，应用很广，是很多高级排序算法的一个子过程。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第一天-快速排序</title>
    <link href="http://geeksblog.cc/suanfa-1.html"/>
    <id>http://geeksblog.cc/suanfa-1.html</id>
    <published>2017-10-20T15:46:59.000Z</published>
    <updated>2017-10-22T16:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第一天-快速排序：</strong> <Excerpt in index | 首页摘要><br>30天突破算法是我给自己定的一个学习计划，希望在这30天，每天都能完成计划。第一天学习最重要的快速排序。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="30天突破算法"><a href="#30天突破算法" class="headerlink" title="30天突破算法"></a>30天突破算法</h2><p>算法种类不计其数，说30天突破只是给自己定的学习计划。目的是通过30天的记录熟悉常见的算法，提高自己的算法能力。对以后的工作来说也是打下夯实的基础。</p>
<h2 id="快速排序的原理"><a href="#快速排序的原理" class="headerlink" title="快速排序的原理"></a>快速排序的原理</h2><p>快速排序也是分治法思想的一种实现，他的思路是使数组中的每个元素与基准值（Pivot，通常是数组的首个值，A[0]）比较，数组中比基准值小的放在基准值的左边，形成左部；大的放在右边，形成右部；接下来将左部和右部分别递归地执行上面的过程：选基准值，小的放在左边，大的放在右边。重复此过程，直到排序结束。步骤如下：</p>
<ul>
<li>1.找基准值，设Pivot = a[0] </li>
<li>2.分区（Partition）：比基准值小的放左边，大的放右边，基准值(Pivot)放左部与右部的之间。</li>
<li>3.进行左部（a[0] - a[pivot-1]）的递归，以及右部（a[pivot+1] - a[n-1]）的递归，重复上述步骤。</li>
</ul>
<p><img src="http://o7kalf5h3.bkt.clouddn.com/quicksort.jpg" alt="快速排序原理图"></p>
<h2 id="快速排序java实现（递归版）"><a href="#快速排序java实现（递归版）" class="headerlink" title="快速排序java实现（递归版）"></a>快速排序java实现（递归版）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</div><div class="line">        System.out.println(<span class="string">"排序之前："</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">            System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//快速排序</span></div><div class="line">        quick(a);</div><div class="line">        System.out.println();</div><div class="line">        System.out.println(<span class="string">"排序之后："</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">            System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a.length&gt;<span class="number">0</span>)&#123;</div><div class="line">            quickSort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(low&lt;high)&#123; <span class="comment">//如果不加这个判断递归会无法退出导致堆栈溢出异常</span></div><div class="line">            <span class="keyword">int</span> middle = getMiddle(a,low,high);</div><div class="line">            quickSort(a, <span class="number">0</span>, middle-<span class="number">1</span>);</div><div class="line">            quickSort(a, middle+<span class="number">1</span>, high);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = a[low];<span class="comment">//基准元素</span></div><div class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">            <span class="comment">//找到比基准元素小的元素位置</span></div><div class="line">            <span class="keyword">while</span>(low&lt;high &amp;&amp; a[high]&gt;=temp)&#123;</div><div class="line">                high--;</div><div class="line">            &#125;</div><div class="line">            a[low] = a[high]; </div><div class="line">            <span class="keyword">while</span>(low&lt;high &amp;&amp; a[low]&lt;=temp)&#123;</div><div class="line">                low++;</div><div class="line">            &#125;</div><div class="line">            a[high] = a[low];</div><div class="line">        &#125;</div><div class="line">        a[low] = temp;</div><div class="line">        <span class="keyword">return</span> low;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速排序三向切分法（改进的实现）"><a href="#快速排序三向切分法（改进的实现）" class="headerlink" title="快速排序三向切分法（改进的实现）"></a>快速排序三向切分法（改进的实现）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick3Sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> lt = low, gt = high;</div><div class="line">    <span class="keyword">int</span> temp = a[low];</div><div class="line">    <span class="keyword">int</span> i = low;</div><div class="line">    <span class="keyword">while</span> (i &lt;= gt) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i] &lt; temp) swap(a, lt++, i++);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; temp) swap(a, i, gt--);</div><div class="line">        <span class="keyword">else</span> i++;</div><div class="line">    &#125;</div><div class="line">    quick3Sort(a, low, lt - <span class="number">1</span>);</div><div class="line">    quick3Sort(a, gt + <span class="number">1</span>, high);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> swap = a[i];</div><div class="line">    a[i] = a[j];</div><div class="line">    a[j] = swap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速排序的复杂度"><a href="#快速排序的复杂度" class="headerlink" title="快速排序的复杂度"></a>快速排序的复杂度</h2><p>时间复杂度 nlogn,排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。快速排序是一个不稳定的排序方法。</p>
<h2 id="改进方法"><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h2><ol>
<li>当数组比较小的时候，快速排序比插入排序慢，这个时候用插入排序替换比较好。</li>
<li>通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录</li>
</ol>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul>
<li>普通的无序集合排序，使用快速排序。 </li>
<li>包含很多重复元素的集合排序，使用三向切分的快速排序。</li>
<li>基本有序的集合使用归并排序。</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第一天-快速排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;30天突破算法是我给自己定的一个学习计划，希望在这30天，每天都能完成计划。第一天学习最重要的快速排序。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>学习计划-30天突破算法</title>
    <link href="http://geeksblog.cc/study-plan.html"/>
    <id>http://geeksblog.cc/study-plan.html</id>
    <published>2017-10-18T11:47:55.000Z</published>
    <updated>2017-10-30T13:47:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 学习计划-30天突破算法：</strong> <Excerpt in index | 首页摘要><br>作为一个非专业出身的程序员，一直对算法的学习赶紧断断续续，终于下定决心对算法做一次详细总结。30天时间把程序员常用算法逐一突破。这次计划更是对自己的一次挑战，希望自己能坚持到最后！<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="学习排序算法的意义"><a href="#学习排序算法的意义" class="headerlink" title="学习排序算法的意义"></a>学习排序算法的意义</h2><ol>
<li>学会比较算法的性能的方法</li>
<li>相关的排序能解决类似的问题</li>
<li>排序算法很多时候是解决问题的第一步</li>
</ol>
<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ol>
<li>快速排序</li>
<li>插入排序</li>
<li>希尔排序</li>
<li>归并排序</li>
<li>选择排序</li>
<li>冒泡排序</li>
<li>堆排序</li>
<li>桶排序</li>
<li>排序算法比较</li>
</ol>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><ol>
<li>二叉树高度和二叉树的遍历</li>
<li>红黑树</li>
<li>b树</li>
</ol>
<h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><ol>
<li>二分查找</li>
<li>二叉查找树</li>
<li>平衡查找树</li>
<li>散列表</li>
</ol>
<h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ol>
<li>递归（普通递归，尾递归）</li>
<li>动态规划</li>
<li>贪婪算法</li>
<li>分治法</li>
</ol>
<h3 id="图的算法"><a href="#图的算法" class="headerlink" title="图的算法"></a>图的算法</h3><ol>
<li>深度优先</li>
<li>广度优先</li>
<li>最小生成树</li>
<li>最短路径 </li>
</ol>
<h3 id="字符串算法"><a href="#字符串算法" class="headerlink" title="字符串算法"></a>字符串算法</h3><ol>
<li>字符串查找</li>
<li>单词查找树</li>
<li>子字符串查找</li>
</ol>
<h3 id="典型算法分析"><a href="#典型算法分析" class="headerlink" title="典型算法分析"></a>典型算法分析</h3><ol>
<li>拓扑排序</li>
<li>关键路径排序</li>
<li>遗传算法</li>
<li>RSA算法</li>
</ol>
<h2 id="英语技术文档阅读突破"><a href="#英语技术文档阅读突破" class="headerlink" title="英语技术文档阅读突破"></a>英语技术文档阅读突破</h2><ol>
<li>熟悉常用技术词汇</li>
<li>阅读常见的技术文档（官网文档看一遍）</li>
<li>记住常用的词汇</li>
<li>阅读英文技术书籍</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 学习计划-30天突破算法：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;作为一个非专业出身的程序员，一直对算法的学习赶紧断断续续，终于下定决心对算法做一次详细总结。30天时间把程序员常用算法逐一突破。这次计划更是对自己的一次挑战，希望自己能坚持到最后！&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://geeksblog.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="http://geeksblog.cc/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>用java将GBK工程转为uft8</title>
    <link href="http://geeksblog.cc/trandsferProject.html"/>
    <id>http://geeksblog.cc/trandsferProject.html</id>
    <published>2017-08-11T23:43:59.000Z</published>
    <updated>2017-08-12T00:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 用java将GBK工程转为uft8：</strong> <Excerpt in index | 首页摘要><br>windows下的默认编码为GBK还有gb2312，如何把gbk的java工程转为utf8的呢，如果直接修改工程编码，其实里面的java文件中中文是会乱码的，写了个批量转换java工程的程序，消遣一下。<br><a id="more"></a></p>
<p><The rest of contents | 余下全文></p>
<h2 id="为什么要转码？"><a href="#为什么要转码？" class="headerlink" title="为什么要转码？"></a>为什么要转码？</h2><p>有些老的项目，或者朋友的项目之前没注意在windows上不是utf8，而你有需要看注释或者什么，总不能一个文件一个文件的去改编码属性吧。</p>
<h2 id="本程序试用范围"><a href="#本程序试用范围" class="headerlink" title="本程序试用范围"></a>本程序试用范围</h2><p>gbk的代码，或者gb2312的工程均可以转换</p>
<h2 id="编码转换的思路"><a href="#编码转换的思路" class="headerlink" title="编码转换的思路"></a>编码转换的思路</h2><p>本来想做成一个通用的会自动检测编码，自动转换的程序。但是由于判断编码类型不准，所以做成了针对GBK的转换。</p>
<ol>
<li>制定gbk编码把文件流读进来，加载到内存，转为String类型的内容</li>
<li>将String内容转为utf8的String</li>
<li>将String内容写入文件</li>
</ol>
<h2 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferProject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transferFile</span><span class="params">(String pathName, <span class="keyword">int</span> depth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        File dirFile = <span class="keyword">new</span> File(pathName);</div><div class="line">        <span class="keyword">if</span> (!isValidFile(dirFile)) <span class="keyword">return</span>;</div><div class="line">        <span class="comment">//获取此目录下的所有文件名与目录名</span></div><div class="line">        String[] fileList = dirFile.list();</div><div class="line">        <span class="keyword">int</span> currentDepth = depth + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fileList.length; i++) &#123;</div><div class="line">            String string = fileList[i];</div><div class="line">            File file = <span class="keyword">new</span> File(dirFile.getPath(), string);</div><div class="line">            String name = file.getName();</div><div class="line">            <span class="comment">//如果是一个目录，搜索深度depth++，输出目录名后，进行递归</span></div><div class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</div><div class="line">                <span class="comment">//递归</span></div><div class="line">                transferFile(file.getCanonicalPath(), currentDepth);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (name.contains(<span class="string">".java"</span>) || name.contains(<span class="string">".properties"</span>) || name.contains(<span class="string">".xml"</span>)) &#123;</div><div class="line">                    readAndWrite(file);</div><div class="line">                    System.out.println(name + <span class="string">" has converted to utf8 "</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidFile</span><span class="params">(File dirFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dirFile.exists()) &#123;</div><div class="line">            System.out.println(<span class="string">"file exist"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dirFile.isDirectory()) &#123;</div><div class="line">            <span class="keyword">if</span> (dirFile.isFile()) &#123;</div><div class="line">                System.out.println(dirFile.getCanonicalFile());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readAndWrite</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String  content = FileUtils.readFileByEncode(file.getPath(), <span class="string">"GBK"</span>);</div><div class="line">        FileUtils.writeByBufferedReader(file.getPath(), <span class="keyword">new</span> String(content.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"UTF-8"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//程序入口，制定src的path</span></div><div class="line">        String path = <span class="string">"/Users/mac/Downloads/unit06_jdbc/src"</span>;</div><div class="line">        transferFile(path, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeByBufferedReader</span><span class="params">(String path, String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            File file = <span class="keyword">new</span> File(path);</div><div class="line">            file.delete();</div><div class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</div><div class="line">                file.createNewFile();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(file, <span class="keyword">false</span>);</div><div class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</div><div class="line">            bw.write(content);</div><div class="line">            bw.flush();</div><div class="line">            bw.close();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFileByEncode</span><span class="params">(String path, String chatSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        InputStream input = <span class="keyword">new</span> FileInputStream(path);</div><div class="line">        InputStreamReader in = <span class="keyword">new</span> InputStreamReader(input, chatSet);</div><div class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(in);</div><div class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">        String line = reader.readLine();</div><div class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</div><div class="line">            sb.append(line);</div><div class="line">            sb.append(<span class="string">"\r\n"</span>);</div><div class="line">            line = reader.readLine();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到类似的问题，都可以试着用代码来进行实现，给自己的编码带来一些新的乐趣，也增加自己的信心。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 用java将GBK工程转为uft8：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;windows下的默认编码为GBK还有gb2312，如何把gbk的java工程转为utf8的呢，如果直接修改工程编码，其实里面的java文件中中文是会乱码的，写了个批量转换java工程的程序，消遣一下。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://geeksblog.cc/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="http://geeksblog.cc/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>阿拉伯数字转汉字写法</title>
    <link href="http://geeksblog.cc/num2Chinese.html"/>
    <id>http://geeksblog.cc/num2Chinese.html</id>
    <published>2017-07-29T14:25:27.000Z</published>
    <updated>2017-07-29T14:50:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 阿拉伯数字转汉字写法：</strong> <Excerpt in index | 首页摘要><br>找工作时看到“某团”的题目，把一个int的数字转为汉字的读法，比如123，转成一百二十三，限时20分钟。如果二十分钟做不出来，简历就不要投了。说实话，20分钟能调通的人真的不多，感觉某团还是装逼成分太多！<br><a id="more"></a></p>
<p><The rest of contents | 余下全文></p>
<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>用java实现，把int的数字转为汉字读音，比如123，转成一百二十三，10020转为一万零二十</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>中文计数的特点，以万为小节，万以内的都是以“十百千”为权位单独计数，比如一千百，一千千都是非法的。<br>而“十百千”这样的权位可以与“万”，“亿”进行搭配，二十亿，五千万等等。</p>
<h2 id="中文数字的零"><a href="#中文数字的零" class="headerlink" title="中文数字的零"></a>中文数字的零</h2><p>中文的零的使用总结起来有三个规则，</p>
<ul>
<li>以10000为小节，结尾是0，不使用零，比如1020</li>
<li>以10000为小节，小节内两个非0数字之间需要零</li>
<li>小节的千位是0，若小节前无其他数字，不用零，否者用零</li>
</ul>
<h2 id="完整代码（参考算法的乐趣第四章）"><a href="#完整代码（参考算法的乐趣第四章）" class="headerlink" title="完整代码（参考算法的乐趣第四章）"></a>完整代码（参考算法的乐趣第四章）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberTransfer</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] chnNumChar = <span class="keyword">new</span> String[]&#123;<span class="string">"零"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>, <span class="string">"七"</span>, <span class="string">"八"</span>, <span class="string">"九"</span>&#125;;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] chnUnitSection = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>, <span class="string">"万亿"</span>&#125;;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] chnUnitChar = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"十"</span>, <span class="string">"百"</span>, <span class="string">"千"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNumberToChinese</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">304</span>, <span class="number">4006</span>, <span class="number">4000</span>, <span class="number">10003</span>, <span class="number">10030</span>, <span class="number">21010011</span>, <span class="number">101101101</span>&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            System.out.println(numberToChinese(nums[i]));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">numberToChinese</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        String strIns;</div><div class="line">        String chnStr = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> unitPos = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> needZero = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">"零"</span>;</div><div class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</div><div class="line">            strIns = <span class="string">""</span>;</div><div class="line">            <span class="keyword">int</span> section = num % <span class="number">10000</span>;</div><div class="line">            <span class="keyword">if</span> (needZero) &#123;</div><div class="line">                chnStr = chnNumChar[<span class="number">0</span>] + chnStr;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 添加节权（万，亿）</span></div><div class="line">            strIns += (section != <span class="number">0</span>) ? chnUnitSection[unitPos] : chnUnitSection[<span class="number">0</span>];</div><div class="line">            chnStr = strIns + chnStr;</div><div class="line">            <span class="comment">// 以万为单位，求万以内的权位</span></div><div class="line">            chnStr = sectionToChinese(section, chnStr);</div><div class="line">            needZero = (section &lt; <span class="number">1000</span>) &amp;&amp; (section &gt; <span class="number">0</span>);</div><div class="line">            num = num / <span class="number">10000</span>;</div><div class="line">            unitPos++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> chnStr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">sectionToChinese</span><span class="params">(<span class="keyword">int</span> section, String chnStr)</span> </span>&#123;</div><div class="line">        String strIns;</div><div class="line">        <span class="keyword">int</span> unitPos = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> zero = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">while</span> (section &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> v = section % <span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span> (v == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (section == <span class="number">0</span> || !zero) &#123;</div><div class="line">                    zero = <span class="keyword">true</span>;<span class="comment">// zero确保不会出现多个零</span></div><div class="line">                    chnStr = chnNumChar[v] + chnStr;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                zero = <span class="keyword">false</span>;</div><div class="line">                strIns = chnNumChar[v]; <span class="comment">// 此位置对应等中文数字</span></div><div class="line">                strIns += chnUnitChar[unitPos];<span class="comment">// 此位置对应的权位</span></div><div class="line">                chnStr = strIns + chnStr;</div><div class="line">            &#125;</div><div class="line">            unitPos++;</div><div class="line">            section = section / <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> chnStr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 阿拉伯数字转汉字写法：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;找工作时看到“某团”的题目，把一个int的数字转为汉字的读法，比如123，转成一百二十三，限时20分钟。如果二十分钟做不出来，简历就不要投了。说实话，20分钟能调通的人真的不多，感觉某团还是装逼成分太多！&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
