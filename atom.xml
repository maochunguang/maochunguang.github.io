<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山不转水转</title>
  <subtitle>不想成为架构师的程序员不是一个好程序员！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://geeksblog.cc/"/>
  <updated>2017-10-22T16:24:45.847Z</updated>
  <id>http://geeksblog.cc/</id>
  
  <author>
    <name>山不转水转</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>突破算法第三天-希尔排序</title>
    <link href="http://geeksblog.cc/suanfa-3.html"/>
    <id>http://geeksblog.cc/suanfa-3.html</id>
    <published>2017-10-22T13:51:03.000Z</published>
    <updated>2017-10-22T16:24:45.847Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第三天-希尔排序：</strong> <Excerpt in index | 首页摘要><br>希尔排序平常用的比较少，主要是基于插入排序的改进。但是希尔排序的性能很高，数组越大，性能优势越明显。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="希尔排序的基本原理"><a href="#希尔排序的基本原理" class="headerlink" title="希尔排序的基本原理"></a>希尔排序的基本原理</h2><p>基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。<br>操作方法：</p>
<ol>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1； </li>
<li>按增量序列个数k，对序列进行k 趟排序； </li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ol>
<p><img src="http://o7kalf5h3.bkt.clouddn.com/shellSort.jpg" alt="希尔排序原理图"></p>
<h2 id="希尔排序java实现"><a href="#希尔排序java实现" class="headerlink" title="希尔排序java实现"></a>希尔排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = a.length;</div><div class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (h &lt; n/<span class="number">3</span>) h = <span class="number">3</span>*h + <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// h-sort the array</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; (a[j]&lt; a[j-h]); j -= h) &#123;</div><div class="line">                swap(a, j, j-h);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        h /= <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> swap = a[i];</div><div class="line">    a[i] = a[j];</div><div class="line">    a[j] = swap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，是一个不稳定排序算法</p>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第三天-希尔排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;希尔排序平常用的比较少，主要是基于插入排序的改进。但是希尔排序的性能很高，数组越大，性能优势越明显。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第二天-插入排序</title>
    <link href="http://geeksblog.cc/suanfa-2.html"/>
    <id>http://geeksblog.cc/suanfa-2.html</id>
    <published>2017-10-21T01:41:27.000Z</published>
    <updated>2017-10-22T16:24:49.390Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第二天-插入排序：</strong> <Excerpt in index | 首页摘要><br>今天是突破算法第二天，插入排序，比较简单。效率比较低，但是思想很广泛，应用很广，是很多高级排序算法的一个子过程。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="插入排序的原理"><a href="#插入排序的原理" class="headerlink" title="插入排序的原理"></a>插入排序的原理</h2><p> 将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录<br> 看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。<br> 要点：设立哨兵，作为临时存储和判断数组边界之用</p>
<p><img src="http://o7kalf5h3.bkt.clouddn.com/insert.jpg" alt="插入排序原理"></p>
<h2 id="插入排序java实现"><a href="#插入排序java实现" class="headerlink" title="插入排序java实现"></a>插入排序java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; (a[j]&lt;a[j-<span class="number">1</span>]); j--) &#123;</div><div class="line">               swap(a, j, j-<span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> swap = a[i];</div><div class="line">       a[i] = a[j];</div><div class="line">       a[j] = swap;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>插入排序的复杂度为O（n^2）</p>
<h2 id="改进方法"><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h2><p>希尔排序，其他的插入排序有二分插入排序，2-路插入排序。</p>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>插入排序比较适合部分有序的数组（以下四种数组）</p>
<ul>
<li>数组中每个元素距离它的最终位置都不远</li>
<li>一个有序的大数组接一个小数组</li>
<li>数组中只有几个位置不正确</li>
<li>数组比较小</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第二天-插入排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;今天是突破算法第二天，插入排序，比较简单。效率比较低，但是思想很广泛，应用很广，是很多高级排序算法的一个子过程。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>突破算法第一天-快速排序</title>
    <link href="http://geeksblog.cc/suanfa-1.html"/>
    <id>http://geeksblog.cc/suanfa-1.html</id>
    <published>2017-10-20T15:46:59.000Z</published>
    <updated>2017-10-22T16:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 突破算法第一天-快速排序：</strong> <Excerpt in index | 首页摘要><br>30天突破算法是我给自己定的一个学习计划，希望在这30天，每天都能完成计划。第一天学习最重要的快速排序。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="30天突破算法"><a href="#30天突破算法" class="headerlink" title="30天突破算法"></a>30天突破算法</h2><p>算法种类不计其数，说30天突破只是给自己定的学习计划。目的是通过30天的记录熟悉常见的算法，提高自己的算法能力。对以后的工作来说也是打下夯实的基础。</p>
<h2 id="快速排序的原理"><a href="#快速排序的原理" class="headerlink" title="快速排序的原理"></a>快速排序的原理</h2><p>快速排序也是分治法思想的一种实现，他的思路是使数组中的每个元素与基准值（Pivot，通常是数组的首个值，A[0]）比较，数组中比基准值小的放在基准值的左边，形成左部；大的放在右边，形成右部；接下来将左部和右部分别递归地执行上面的过程：选基准值，小的放在左边，大的放在右边。重复此过程，直到排序结束。步骤如下：</p>
<ul>
<li>1.找基准值，设Pivot = a[0] </li>
<li>2.分区（Partition）：比基准值小的放左边，大的放右边，基准值(Pivot)放左部与右部的之间。</li>
<li>3.进行左部（a[0] - a[pivot-1]）的递归，以及右部（a[pivot+1] - a[n-1]）的递归，重复上述步骤。</li>
</ul>
<p><img src="http://o7kalf5h3.bkt.clouddn.com/quicksort.jpg" alt="快速排序原理图"></p>
<h2 id="快速排序java实现（递归版）"><a href="#快速排序java实现（递归版）" class="headerlink" title="快速排序java实现（递归版）"></a>快速排序java实现（递归版）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</div><div class="line">        System.out.println(<span class="string">"排序之前："</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">            System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//快速排序</span></div><div class="line">        quick(a);</div><div class="line">        System.out.println();</div><div class="line">        System.out.println(<span class="string">"排序之后："</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">            System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a.length&gt;<span class="number">0</span>)&#123;</div><div class="line">            quickSort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(low&lt;high)&#123; <span class="comment">//如果不加这个判断递归会无法退出导致堆栈溢出异常</span></div><div class="line">            <span class="keyword">int</span> middle = getMiddle(a,low,high);</div><div class="line">            quickSort(a, <span class="number">0</span>, middle-<span class="number">1</span>);</div><div class="line">            quickSort(a, middle+<span class="number">1</span>, high);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = a[low];<span class="comment">//基准元素</span></div><div class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</div><div class="line">            <span class="comment">//找到比基准元素小的元素位置</span></div><div class="line">            <span class="keyword">while</span>(low&lt;high &amp;&amp; a[high]&gt;=temp)&#123;</div><div class="line">                high--;</div><div class="line">            &#125;</div><div class="line">            a[low] = a[high]; </div><div class="line">            <span class="keyword">while</span>(low&lt;high &amp;&amp; a[low]&lt;=temp)&#123;</div><div class="line">                low++;</div><div class="line">            &#125;</div><div class="line">            a[high] = a[low];</div><div class="line">        &#125;</div><div class="line">        a[low] = temp;</div><div class="line">        <span class="keyword">return</span> low;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速排序三向切分法（改进的实现）"><a href="#快速排序三向切分法（改进的实现）" class="headerlink" title="快速排序三向切分法（改进的实现）"></a>快速排序三向切分法（改进的实现）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick3Sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> lt = low, gt = high;</div><div class="line">    <span class="keyword">int</span> temp = a[low];</div><div class="line">    <span class="keyword">int</span> i = low;</div><div class="line">    <span class="keyword">while</span> (i &lt;= gt) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i] &lt; temp) swap(a, lt++, i++);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; temp) swap(a, i, gt--);</div><div class="line">        <span class="keyword">else</span> i++;</div><div class="line">    &#125;</div><div class="line">    quick3Sort(a, low, lt - <span class="number">1</span>);</div><div class="line">    quick3Sort(a, gt + <span class="number">1</span>, high);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> swap = a[i];</div><div class="line">    a[i] = a[j];</div><div class="line">    a[j] = swap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速排序的复杂度"><a href="#快速排序的复杂度" class="headerlink" title="快速排序的复杂度"></a>快速排序的复杂度</h2><p>时间复杂度 nlogn,排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。快速排序是一个不稳定的排序方法。</p>
<h2 id="改进方法"><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h2><ol>
<li>当数组比较小的时候，快速排序比插入排序慢，这个时候用插入排序替换比较好。</li>
<li>通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录</li>
</ol>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul>
<li>普通的无序集合排序，使用快速排序。 </li>
<li>包含很多重复元素的集合排序，使用三向切分的快速排序。</li>
<li>基本有序的集合使用归并排序。</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 突破算法第一天-快速排序：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;30天突破算法是我给自己定的一个学习计划，希望在这30天，每天都能完成计划。第一天学习最重要的快速排序。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>学习计划-30天突破算法</title>
    <link href="http://geeksblog.cc/study-plan.html"/>
    <id>http://geeksblog.cc/study-plan.html</id>
    <published>2017-10-18T11:47:55.000Z</published>
    <updated>2017-10-22T16:25:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 学习计划-30天突破算法：</strong> <Excerpt in index | 首页摘要><br>作为一个非专业出身的程序员，一直对算法的学习赶紧断断续续，终于下定决心对算法做一次详细总结。30天时间把程序员常用算法逐一突破。这次计划更是对自己的一次挑战，希望自己能坚持到最后！<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="30天突破算法"><a href="#30天突破算法" class="headerlink" title="30天突破算法"></a>30天突破算法</h2><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ol>
<li>快速排序</li>
<li>插入排序</li>
<li>希尔排序</li>
<li>归并排序</li>
<li>选择排序</li>
<li>冒泡排序</li>
<li>堆排序</li>
<li>桶排序</li>
<li>排序算法比较</li>
</ol>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><ol>
<li>二叉树高度和深度</li>
<li>二叉树的遍历</li>
<li>红黑树的平衡</li>
</ol>
<h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><ol>
<li>二分查找</li>
<li>二叉查找树</li>
<li>平衡查找树</li>
<li>散列表</li>
</ol>
<h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ol>
<li>递归（普通递归，尾递归）</li>
<li>动态规划</li>
<li>贪婪算法</li>
<li>分治法</li>
</ol>
<h3 id="图的算法"><a href="#图的算法" class="headerlink" title="图的算法"></a>图的算法</h3><ol>
<li>深度优先</li>
<li>广度优先</li>
<li>最小生成树</li>
<li>最短路径 </li>
</ol>
<h3 id="字符串算法"><a href="#字符串算法" class="headerlink" title="字符串算法"></a>字符串算法</h3><ol>
<li>字符串查找</li>
<li>单词查找树</li>
<li>子字符串查找</li>
</ol>
<h3 id="典型算法分析"><a href="#典型算法分析" class="headerlink" title="典型算法分析"></a>典型算法分析</h3><ol>
<li>拓扑排序</li>
<li>关键路径排序</li>
<li>遗传算法</li>
<li>RSA算法</li>
</ol>
<h2 id="英语技术文档阅读突破"><a href="#英语技术文档阅读突破" class="headerlink" title="英语技术文档阅读突破"></a>英语技术文档阅读突破</h2><ol>
<li>熟悉常用技术词汇</li>
<li>阅读常见的技术文档（官网文档看一遍）</li>
<li>记住常用的词汇</li>
<li>阅读英文技术书籍</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 学习计划-30天突破算法：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;作为一个非专业出身的程序员，一直对算法的学习赶紧断断续续，终于下定决心对算法做一次详细总结。30天时间把程序员常用算法逐一突破。这次计划更是对自己的一次挑战，希望自己能坚持到最后！&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://geeksblog.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="http://geeksblog.cc/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>用java将GBK工程转为uft8</title>
    <link href="http://geeksblog.cc/trandsferProject.html"/>
    <id>http://geeksblog.cc/trandsferProject.html</id>
    <published>2017-08-11T23:43:59.000Z</published>
    <updated>2017-08-12T00:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 用java将GBK工程转为uft8：</strong> <Excerpt in index | 首页摘要><br>windows下的默认编码为GBK还有gb2312，如何把gbk的java工程转为utf8的呢，如果直接修改工程编码，其实里面的java文件中中文是会乱码的，写了个批量转换java工程的程序，消遣一下。<br><a id="more"></a></p>
<p><The rest of contents | 余下全文></p>
<h2 id="为什么要转码？"><a href="#为什么要转码？" class="headerlink" title="为什么要转码？"></a>为什么要转码？</h2><p>有些老的项目，或者朋友的项目之前没注意在windows上不是utf8，而你有需要看注释或者什么，总不能一个文件一个文件的去改编码属性吧。</p>
<h2 id="本程序试用范围"><a href="#本程序试用范围" class="headerlink" title="本程序试用范围"></a>本程序试用范围</h2><p>gbk的代码，或者gb2312的工程均可以转换</p>
<h2 id="编码转换的思路"><a href="#编码转换的思路" class="headerlink" title="编码转换的思路"></a>编码转换的思路</h2><p>本来想做成一个通用的会自动检测编码，自动转换的程序。但是由于判断编码类型不准，所以做成了针对GBK的转换。</p>
<ol>
<li>制定gbk编码把文件流读进来，加载到内存，转为String类型的内容</li>
<li>将String内容转为utf8的String</li>
<li>将String内容写入文件</li>
</ol>
<h2 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferProject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transferFile</span><span class="params">(String pathName, <span class="keyword">int</span> depth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        File dirFile = <span class="keyword">new</span> File(pathName);</div><div class="line">        <span class="keyword">if</span> (!isValidFile(dirFile)) <span class="keyword">return</span>;</div><div class="line">        <span class="comment">//获取此目录下的所有文件名与目录名</span></div><div class="line">        String[] fileList = dirFile.list();</div><div class="line">        <span class="keyword">int</span> currentDepth = depth + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fileList.length; i++) &#123;</div><div class="line">            String string = fileList[i];</div><div class="line">            File file = <span class="keyword">new</span> File(dirFile.getPath(), string);</div><div class="line">            String name = file.getName();</div><div class="line">            <span class="comment">//如果是一个目录，搜索深度depth++，输出目录名后，进行递归</span></div><div class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</div><div class="line">                <span class="comment">//递归</span></div><div class="line">                transferFile(file.getCanonicalPath(), currentDepth);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (name.contains(<span class="string">".java"</span>) || name.contains(<span class="string">".properties"</span>) || name.contains(<span class="string">".xml"</span>)) &#123;</div><div class="line">                    readAndWrite(file);</div><div class="line">                    System.out.println(name + <span class="string">" has converted to utf8 "</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidFile</span><span class="params">(File dirFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dirFile.exists()) &#123;</div><div class="line">            System.out.println(<span class="string">"file exist"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dirFile.isDirectory()) &#123;</div><div class="line">            <span class="keyword">if</span> (dirFile.isFile()) &#123;</div><div class="line">                System.out.println(dirFile.getCanonicalFile());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readAndWrite</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String  content = FileUtils.readFileByEncode(file.getPath(), <span class="string">"GBK"</span>);</div><div class="line">        FileUtils.writeByBufferedReader(file.getPath(), <span class="keyword">new</span> String(content.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"UTF-8"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//程序入口，制定src的path</span></div><div class="line">        String path = <span class="string">"/Users/mac/Downloads/unit06_jdbc/src"</span>;</div><div class="line">        transferFile(path, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeByBufferedReader</span><span class="params">(String path, String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            File file = <span class="keyword">new</span> File(path);</div><div class="line">            file.delete();</div><div class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</div><div class="line">                file.createNewFile();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(file, <span class="keyword">false</span>);</div><div class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</div><div class="line">            bw.write(content);</div><div class="line">            bw.flush();</div><div class="line">            bw.close();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFileByEncode</span><span class="params">(String path, String chatSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        InputStream input = <span class="keyword">new</span> FileInputStream(path);</div><div class="line">        InputStreamReader in = <span class="keyword">new</span> InputStreamReader(input, chatSet);</div><div class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(in);</div><div class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">        String line = reader.readLine();</div><div class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</div><div class="line">            sb.append(line);</div><div class="line">            sb.append(<span class="string">"\r\n"</span>);</div><div class="line">            line = reader.readLine();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到类似的问题，都可以试着用代码来进行实现，给自己的编码带来一些新的乐趣，也增加自己的信心。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 用java将GBK工程转为uft8：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;windows下的默认编码为GBK还有gb2312，如何把gbk的java工程转为utf8的呢，如果直接修改工程编码，其实里面的java文件中中文是会乱码的，写了个批量转换java工程的程序，消遣一下。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://geeksblog.cc/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="http://geeksblog.cc/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>阿拉伯数字转汉字写法</title>
    <link href="http://geeksblog.cc/num2Chinese.html"/>
    <id>http://geeksblog.cc/num2Chinese.html</id>
    <published>2017-07-29T14:25:27.000Z</published>
    <updated>2017-07-29T14:50:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 阿拉伯数字转汉字写法：</strong> <Excerpt in index | 首页摘要><br>找工作时看到“某团”的题目，把一个int的数字转为汉字的读法，比如123，转成一百二十三，限时20分钟。如果二十分钟做不出来，简历就不要投了。说实话，20分钟能调通的人真的不多，感觉某团还是装逼成分太多！<br><a id="more"></a></p>
<p><The rest of contents | 余下全文></p>
<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>用java实现，把int的数字转为汉字读音，比如123，转成一百二十三，10020转为一万零二十</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>中文计数的特点，以万为小节，万以内的都是以“十百千”为权位单独计数，比如一千百，一千千都是非法的。<br>而“十百千”这样的权位可以与“万”，“亿”进行搭配，二十亿，五千万等等。</p>
<h2 id="中文数字的零"><a href="#中文数字的零" class="headerlink" title="中文数字的零"></a>中文数字的零</h2><p>中文的零的使用总结起来有三个规则，</p>
<ul>
<li>以10000为小节，结尾是0，不使用零，比如1020</li>
<li>以10000为小节，小节内两个非0数字之间需要零</li>
<li>小节的千位是0，若小节前无其他数字，不用零，否者用零</li>
</ul>
<h2 id="完整代码（参考算法的乐趣第四章）"><a href="#完整代码（参考算法的乐趣第四章）" class="headerlink" title="完整代码（参考算法的乐趣第四章）"></a>完整代码（参考算法的乐趣第四章）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberTransfer</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] chnNumChar = <span class="keyword">new</span> String[]&#123;<span class="string">"零"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>, <span class="string">"七"</span>, <span class="string">"八"</span>, <span class="string">"九"</span>&#125;;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] chnUnitSection = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>, <span class="string">"万亿"</span>&#125;;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] chnUnitChar = <span class="keyword">new</span> String[]&#123;<span class="string">""</span>, <span class="string">"十"</span>, <span class="string">"百"</span>, <span class="string">"千"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNumberToChinese</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">304</span>, <span class="number">4006</span>, <span class="number">4000</span>, <span class="number">10003</span>, <span class="number">10030</span>, <span class="number">21010011</span>, <span class="number">101101101</span>&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            System.out.println(numberToChinese(nums[i]));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">numberToChinese</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        String strIns;</div><div class="line">        String chnStr = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> unitPos = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> needZero = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">"零"</span>;</div><div class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</div><div class="line">            strIns = <span class="string">""</span>;</div><div class="line">            <span class="keyword">int</span> section = num % <span class="number">10000</span>;</div><div class="line">            <span class="keyword">if</span> (needZero) &#123;</div><div class="line">                chnStr = chnNumChar[<span class="number">0</span>] + chnStr;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 添加节权（万，亿）</span></div><div class="line">            strIns += (section != <span class="number">0</span>) ? chnUnitSection[unitPos] : chnUnitSection[<span class="number">0</span>];</div><div class="line">            chnStr = strIns + chnStr;</div><div class="line">            <span class="comment">// 以万为单位，求万以内的权位</span></div><div class="line">            chnStr = sectionToChinese(section, chnStr);</div><div class="line">            needZero = (section &lt; <span class="number">1000</span>) &amp;&amp; (section &gt; <span class="number">0</span>);</div><div class="line">            num = num / <span class="number">10000</span>;</div><div class="line">            unitPos++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> chnStr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">sectionToChinese</span><span class="params">(<span class="keyword">int</span> section, String chnStr)</span> </span>&#123;</div><div class="line">        String strIns;</div><div class="line">        <span class="keyword">int</span> unitPos = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> zero = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">while</span> (section &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> v = section % <span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span> (v == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (section == <span class="number">0</span> || !zero) &#123;</div><div class="line">                    zero = <span class="keyword">true</span>;<span class="comment">// zero确保不会出现多个零</span></div><div class="line">                    chnStr = chnNumChar[v] + chnStr;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                zero = <span class="keyword">false</span>;</div><div class="line">                strIns = chnNumChar[v]; <span class="comment">// 此位置对应等中文数字</span></div><div class="line">                strIns += chnUnitChar[unitPos];<span class="comment">// 此位置对应的权位</span></div><div class="line">                chnStr = strIns + chnStr;</div><div class="line">            &#125;</div><div class="line">            unitPos++;</div><div class="line">            section = section / <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> chnStr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 阿拉伯数字转汉字写法：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;找工作时看到“某团”的题目，把一个int的数字转为汉字的读法，比如123，转成一百二十三，限时20分钟。如果二十分钟做不出来，简历就不要投了。说实话，20分钟能调通的人真的不多，感觉某团还是装逼成分太多！&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://geeksblog.cc/categories/algorithm/"/>
    
    
      <category term="算法" scheme="http://geeksblog.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java面试大全自制版</title>
    <link href="http://geeksblog.cc/java-interview.html"/>
    <id>http://geeksblog.cc/java-interview.html</id>
    <published>2017-07-24T13:07:00.000Z</published>
    <updated>2017-07-24T13:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Java面试大全自制版：</strong> <Excerpt in index | 首页摘要><br>java语言知识点多而杂，面试时很多人找不到重点。这份java面试大全，有部分网络上资源，大多数是从好的文章和书籍里总结出来的知识点。<br><a id="more"></a></p>
<p><The rest of contents | 余下全文></p>
<h2 id="本书的目的"><a href="#本书的目的" class="headerlink" title="本书的目的"></a>本书的目的</h2><p>每个java程序员在面试前都不知该准备什么？或者是随便看几个文章就去面试，这样的结果很容易失败！希望本书能给java程序员一个好的指引，让java程序员没有难找的工作！</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="https://maochunguang.gitbooks.io/java-interview/">gitbook地址</a><br><img src="http://o7kalf5h3.bkt.clouddn.com/java-tips.png" alt="目录截图"></p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Java面试大全自制版：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;java语言知识点多而杂，面试时很多人找不到重点。这份java面试大全，有部分网络上资源，大多数是从好的文章和书籍里总结出来的知识点。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://geeksblog.cc/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://geeksblog.cc/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Kobo Aura One导出笔记高级配置</title>
    <link href="http://geeksblog.cc/kobo-config.html"/>
    <id>http://geeksblog.cc/kobo-config.html</id>
    <published>2017-06-23T02:22:57.000Z</published>
    <updated>2017-06-23T03:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Kobo Aura One导出笔记高级配置：</strong> <Excerpt in index | 首页摘要><br>kobo电子书折腾记，导出笔记，从激活到设置，打补丁实现自定义配置，还是自己折腾起来有意思啊。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>买电子书是为了阅读和学习，不是天天折腾电子书，一天刷一次机，如果只是看书，做笔记，学个英文什么的<br>原生系统是最好的。如果看pdf为主，不建议买这电子书，看pdf首选电脑，平板，sony dsp系列，用普通的电子书阅读器，体验太差。</p>
<h2 id="kobo原生系统的功能（推荐原生系统，打上补丁）"><a href="#kobo原生系统的功能（推荐原生系统，打上补丁）" class="headerlink" title="kobo原生系统的功能（推荐原生系统，打上补丁）"></a>kobo原生系统的功能（推荐原生系统，打上补丁）</h2><ol>
<li>格式支持epub，mobi，cbz漫画，txt，kobo epub格式</li>
<li>高亮，笔记，导出笔记（需要配置一下）</li>
<li>字典（英文，中文，法文等多国字典，可以自己修改）</li>
<li>阅读pocket文章（可以把网页保存到pocket，实用pocket同步到阅读器）</li>
<li>自动亮度（最大的优点）</li>
</ol>
<h2 id="koreader的功能"><a href="#koreader的功能" class="headerlink" title="koreader的功能"></a>koreader的功能</h2><ol>
<li>格式支持epub，mobi，cbz漫画，txt，kobo epub格式</li>
<li>扫描版pdf支持重拍，切边（最大特色）</li>
<li>笔记导出到印象笔记</li>
<li>字典（强大的字典扩展）</li>
</ol>
<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p><strong>说明：wifi激活需要翻墙，可以实用笔记连接vpn，然后共享wifi给kobo</strong></p>
<ol>
<li>wifi激活,</li>
<li>kobo setup desktop激活，去kobo官网下载软件，然后电脑需要翻墙，电子书连接上电脑，用软件登录激活。这个软件很不好用，bug也多，建议使用wifi激活。</li>
</ol>
<h2 id="更新固件，打补丁"><a href="#更新固件，打补丁" class="headerlink" title="更新固件，打补丁"></a>更新固件，打补丁</h2><p>kobo的更新固件，更新补丁都是一个模式，把固件或者补丁放到.kobo文件夹，弹出设备就会自动重启</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>电脑连接kobo，在根目录建立一个fonts文件夹，把需要的字体放进去即可</p>
<h2 id="词典"><a href="#词典" class="headerlink" title="词典"></a>词典</h2><p>下载网上改好的字典，直接放到.kobo文件夹下的dict目录下，然后重启就可以了</p>
<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><ol>
<li>刷新页数（打补丁）</li>
<li>上下页宽（打补丁）</li>
<li>全屏模式（修改配置文件）</li>
<li>字体高级设置（修改配置文件）</li>
<li>导出笔记和高亮（修改配置文件）</li>
</ol>
<h2 id="kobo高级配置文件详解"><a href="#kobo高级配置文件详解" class="headerlink" title="kobo高级配置文件详解"></a>kobo高级配置文件详解</h2><p>用电脑连接kobo电子书，打开Kobo找到eReader.conf文件，最好用notepad++修改，或者其他文本编辑器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[FeatureSettings]</div><div class="line">#导出笔记</div><div class="line">ExportHighlightsEnabled=true</div><div class="line">#显示全书的页码，而不是章节的页码</div><div class="line">FullBookPageNumbers=true</div><div class="line">#用在线等维基百科代替词典查询</div><div class="line">OnlineWikipedia=true</div><div class="line">#全屏阅读</div><div class="line">FullScreenReading=true</div><div class="line">#图片缩放</div><div class="line">ImageZoom=true</div><div class="line">#浏览器全屏</div><div class="line">FullScreenBrowser=true</div><div class="line">#关机键截图，但是关机键就无法关机了，不要设置这个鸡肋的功能</div><div class="line">Screenshots=true</div><div class="line">[Reading]</div><div class="line">#翻页刷新的页数，20页全刷一次</div><div class="line">numPartialUpdatePageTurns=20</div><div class="line">#左边距</div><div class="line">readingLeftMargin=0</div><div class="line">#右边距</div><div class="line">readingRightMargin=0</div><div class="line">#行高</div><div class="line">readingLineHeight=1.4</div><div class="line"></div><div class="line">[PowerOptions]</div><div class="line">#自动关机时间</div><div class="line">AutoOffMinutes=60</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Kobo Aura One导出笔记高级配置：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;kobo电子书折腾记，导出笔记，从激活到设置，打补丁实现自定义配置，还是自己折腾起来有意思啊。&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://geeksblog.cc/categories/others/"/>
    
    
      <category term="开发工具" scheme="http://geeksblog.cc/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Illegal Mix of Collations</title>
    <link href="http://geeksblog.cc/mysql-collation.html"/>
    <id>http://geeksblog.cc/mysql-collation.html</id>
    <published>2017-06-12T03:00:14.000Z</published>
    <updated>2017-06-12T03:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> mysql排序字符集问题：</strong> <Excerpt in index | 首页摘要><br>mysql表的每个字段都可以设置单独的排序字符集和文本字符集，如果你创建表的时候不注意，很可能会遇到Illegal mix of collations这个问题。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>用mysql进行两个表的联合查询的时候，出现下面的错误。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Illegal mix of collations (utf8_unicode_ci,<span class="keyword">IMPLICIT</span>) and (utf8_general_ci,<span class="keyword">IMPLICIT</span>) for operation <span class="string">'='</span></div></pre></td></tr></table></figure></p>
<h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><ol>
<li>通过google搜索找到原因，这个错误是mysql的排序字符集不一致导致的。</li>
<li>把联合查询的表使用navicat查看字段的设置，发现了有一个关联字段排序字符集的问题，如图：</li>
<li>这两个表中openid的排序规则不一致，导致出现问题。<br><img src="http://o7kalf5h3.bkt.clouddn.com/openid01.png" alt="user表中opeid"><br><img src="http://o7kalf5h3.bkt.clouddn.com/openid02.png" alt="user_tag表中opeid"></li>
</ol>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>将user表中的字符集和排序规则设置为默认，保持一致即可。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; mysql排序字符集问题：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;mysql表的每个字段都可以设置单独的排序字符集和文本字符集，如果你创建表的时候不注意，很可能会遇到Illegal mix of collations这个问题。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://geeksblog.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://geeksblog.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何选购合适的电脑</title>
    <link href="http://geeksblog.cc/buy-computer.html"/>
    <id>http://geeksblog.cc/buy-computer.html</id>
    <published>2017-06-01T09:34:04.000Z</published>
    <updated>2017-06-05T03:48:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 购买合适的电脑：</strong> <Excerpt in index | 首页摘要><br>现代的生活中每个人都已经离不开电脑了，打游戏，看电影，办公，等等。购买一个合适的电脑显得尤为重要，电脑不舒服，用着影响心情。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="买电脑主要干什么"><a href="#买电脑主要干什么" class="headerlink" title="买电脑主要干什么"></a>买电脑主要干什么</h2><ol>
<li>看电影，上网</li>
<li>打游戏</li>
<li>办公（移动办公）</li>
<li>平面设计（二维）</li>
<li>编程（ios和其它，深度学习）</li>
<li>效果图渲染（3维制图）</li>
</ol>
<h2 id="电脑配置说明"><a href="#电脑配置说明" class="headerlink" title="电脑配置说明"></a>电脑配置说明</h2><p>目前电脑配置的cpu，内存都很高，显卡也很好，而普通电脑的瓶颈都是在硬盘上，所以一台普通电脑换上固体硬盘体验立即上了一个档次，所以现在买电脑不带固态硬盘没法玩的。这里我之列一些主要配置，至于买笔记本还是台式机个人喜好。台式机性能肯定远超同价位笔记本，这个是毋庸置疑的。</p>
<h2 id="看电影，上网"><a href="#看电影，上网" class="headerlink" title="看电影，上网"></a>看电影，上网</h2><p>看电影上网，对电脑配置要求比较低的，一般普通双核cpu，amd的，酷睿i3都不在话下，内存的话4g够用，8g就浪费了。买笔记本或者台式机都可以<br>推荐配置1：i3处理器，4g内存，128固态，整体价位3000-4000左右<br>推荐配置1：i5处理器，4g内存，256固态</p>
<h2 id="打游戏"><a href="#打游戏" class="headerlink" title="打游戏"></a>打游戏</h2><p>游戏主机是最烧钱的，其实游戏主机的cpu要求一般，主要在显卡，内存上。建议买台式机</p>
<ul>
<li>一般的主流网游：i5或i7处理器，内存8g，显卡的话中端显卡就ok，硬盘128ssd+1Thdd起</li>
<li>大型单机：i5或i7处理器，内存16g，，显卡中高端gtx960，970即可，硬盘128ssd+1Thdd起</li>
<li>发烧友：i7处理器，内存32g，显卡高端gtx1060以上，硬盘512ssd+1Thdd起</li>
</ul>
<h2 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h2><p>很多商务人士需要携带笔记本，其实对笔记本的性能要求一般，但是便携性要求很高，用超极本最合适的，  推荐配置：4g内存，256ssd，i5即可</p>
<h2 id="平面设计"><a href="#平面设计" class="headerlink" title="平面设计"></a>平面设计</h2><p>使用ps，ae之类的软件居多，对内存和cpu要求较高，显卡一般即可<br>推荐配置1：16g内存，i7处理器，256ssd，2k／4k专业显示器，中端显卡即可<br>推荐配置2：macbookpro15 16g，512ssd，i7处理器</p>
<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>这里应该分为两类：做mac，ios开发之类的肯定得首选macbookpro，而做windows软件开发肯定windows好一些。个人推荐mac的笔记本做编程，一用就停不下来，会上瘾。<br>推荐配置1：macbookpro15 16g，512ssd，i7处理器<br>推荐配置2：i7处理器，16g内存，512ssd，中端显卡</p>
<h2 id="效果图渲染（3维制图）"><a href="#效果图渲染（3维制图）" class="headerlink" title="效果图渲染（3维制图）"></a>效果图渲染（3维制图）</h2><p>这个是专业领域的需求，对显卡和内存，cpu要求都较高，肯能需要双显卡。<br>推荐配置1：至强处理器，32g内存，512ssd+1Thdd<br>推荐配置2：i7处理器，32g内存，512ssd+1Thdd</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 购买合适的电脑：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;现代的生活中每个人都已经离不开电脑了，打游戏，看电影，办公，等等。购买一个合适的电脑显得尤为重要，电脑不舒服，用着影响心情。&lt;br&gt;
    
    </summary>
    
      <category term="digital" scheme="http://geeksblog.cc/categories/digital/"/>
    
    
      <category term="数码产品" scheme="http://geeksblog.cc/tags/%E6%95%B0%E7%A0%81%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>Mongodb从入门到精通</title>
    <link href="http://geeksblog.cc/mongodb-study.html"/>
    <id>http://geeksblog.cc/mongodb-study.html</id>
    <published>2017-05-26T15:21:23.000Z</published>
    <updated>2017-06-01T09:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> mongodb从入门到精通</strong> <Excerpt in index | 首页摘要><br>    mongodb日常使用的一些知识，增删改查，索引，分片。<br> <a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="mongodb学习"><a href="#mongodb学习" class="headerlink" title="mongodb学习"></a>mongodb学习</h2><h2 id="1-mongodb特性"><a href="#1-mongodb特性" class="headerlink" title="1.mongodb特性"></a>1.mongodb特性</h2><pre><code>1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。
2）所有实体都是在首次使用时创建。
3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。
4）也没有固定的数据模型
5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。
6）mongo本身支持集群和数据分片
7）mongo是c++实现的，支持windows mac linux等主流操作系统
8）性能优越，速度快
</code></pre><h2 id="2-mongo常用操作"><a href="#2-mongo常用操作" class="headerlink" title="2.mongo常用操作"></a>2.mongo常用操作</h2><h3 id="增删操作"><a href="#增删操作" class="headerlink" title="增删操作"></a>增删操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.user.insert(&#123;name:<span class="string">'aaaa'</span>,age:<span class="number">30</span>&#125;);</div><div class="line">db.user.save(&#123;name:<span class="string">'aaaa'</span>,age:<span class="number">30</span>&#125;);</div><div class="line">db.collection.insertOne(&#123;&#125;);<span class="comment">//(3.2新特性)</span></div><div class="line">db.collection.deleteOne(&#123;&#125;,&#123;&#125;);<span class="comment">//(3.2新特性)</span></div><div class="line">db.collection.remove(&#123;name:<span class="string">'aaa'</span>&#125;);</div><div class="line">db.collection.remove();<span class="comment">//(删除全部)</span></div></pre></td></tr></table></figure>
<h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.users.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, joe );</div><div class="line"><span class="comment">//upsert模式</span></div><div class="line">db.users.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, joe,  <span class="literal">true</span> );</div><div class="line"><span class="comment">//MULTI模式</span></div><div class="line">db.users.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, joe,  <span class="literal">true</span> ，<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  </p>
</blockquote>
<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>普通查询<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.user.find();</div><div class="line">db.user.find(&#123;name:<span class="string">'aaa'</span>&#125;);</div><div class="line">db.user.findOne(&#123;name:<span class="string">'aaa'</span>&#125;);</div></pre></td></tr></table></figure></p>
<p>模糊查询<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.UserInfo.find(&#123;userName :<span class="string">'/A/'</span>&#125;) <span class="comment">//（名称%A%）</span></div><div class="line">db.UserInfo.find(&#123;userName :<span class="string">'/^A/'</span>&#125;) <span class="comment">//(名称A%)</span></div></pre></td></tr></table></figure></p>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ol>
<li>$lt, $lte,$gt, $gte(&lt;, &lt;=, &gt;, &gt;= )     </li>
<li>$all    数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );</li>
<li>$exists  可选：true，false  db.things.find( { a : { $exists : true } } );</li>
<li>$mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );</li>
<li>$ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );</li>
<li>$in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});</li>
<li>$nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});</li>
<li>$nor $or的反操作，即不匹配(a或b)  db.things.find( { name : “bob”, $nor : [ { a : 1 },{ b : 2 }]})</li>
<li>$or Or子句，注意$or不能嵌套使用  db.things.find( { name : “bob” , $or : [ { a : 1 },{ b : 2 }]})</li>
<li>$size  匹配数组长度  db.things.find( { a : { $size: 1 } } );</li>
<li>$type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );</li>
</ol>
<h3 id="数组查询"><a href="#数组查询" class="headerlink" title="数组查询"></a>数组查询</h3><p>$size 用来匹配数组长度（即最大下标）<br>// 返回comments包含5个元素的文档<br>db.posts.find({}, {comments:{‘$size’: 5}});<br>// 使用冗余字段来实现<br>db.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});<br>$slice 操作符类似于子键筛选，只不过它筛选的是数组中的项<br>// 仅返回数组中的前5项<br>db.posts.find({}, {comments:{‘$slice’: 5}});<br>// 仅返回数组中的最后5项<br>db.posts.find({}, {comments:{‘$slice’: -5}});<br>// 跳过数组中的前20项，返回接下来的10项<br>db.posts.find({}, {comments:{‘$slice’: [20, 10]}});<br>// 跳过数组中的最后20项，返回接下来的10项<br>db.posts.find({}, {comments:{‘$slice’: [-20, 10]}});<br>MongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配<br>// 返回comments中第1项的by子键为Abe的所有文档<br>db.posts.find( { “comments.0.by” : “Abe” } );   </p>
<h2 id="3-索引的使用"><a href="#3-索引的使用" class="headerlink" title="3.索引的使用"></a>3.索引的使用</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">db.things.ensureIndex(&#123;<span class="string">'j'</span>: <span class="number">1</span>&#125;);</div><div class="line"><span class="comment">//创建子文档 索引</span></div><div class="line">db.things.ensureIndex(&#123;<span class="string">'user.Name'</span> : - <span class="number">1</span>&#125;);</div><div class="line"><span class="comment">//创建 复合 索引</span></div><div class="line">db.things.ensureIndex(&#123;</div><div class="line"><span class="string">'j'</span> : <span class="number">1</span> ,   <span class="comment">//  升序</span></div><div class="line"><span class="string">'x'</span> : - <span class="number">1</span>   <span class="comment">//  降序</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的<br>        当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向</p>
<h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><p>修改索引，只需要重新 运行索引 命令即可<br>如果索引已经存在则会 重建， 不存在的索引会被 添加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">db.things.ensureIndex (&#123;</div><div class="line">	<span class="comment">//原来的索引会 重建</span></div><div class="line">	<span class="string">'user.Name '</span> : - <span class="number">1</span> ,</div><div class="line">	<span class="comment">//新增一个升序 索引</span></div><div class="line">	<span class="string">'user.Name '</span> : <span class="number">1</span> ,</div><div class="line">	<span class="comment">//为 Age 新建降序 索引</span></div><div class="line">	<span class="string">'user.Age '</span> :  - <span class="number">1</span></div><div class="line">	<span class="comment">//打开后台执行</span></div><div class="line">&#125;,&#123;	<span class="string">'background'</span> :   <span class="literal">true</span>&#125;);</div><div class="line"><span class="comment">//重建索引</span></div><div class="line">db.things.reIndex();</div></pre></td></tr></table></figure></p>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//删除集合中的所有 索引</span></div><div class="line">db.things.dropIndexes ();  </div><div class="line"><span class="comment">//删除指定键的索引  </span></div><div class="line">db.things.dropIndex (&#123;</div><div class="line">	x :   <span class="number">1</span> ,</div><div class="line">	y :   - <span class="number">1</span></div><div class="line">&#125;);  </div><div class="line"><span class="comment">//使用 command 删除指定键的 索引</span></div><div class="line">db.runCommand (&#123;</div><div class="line">	dropIndexes : <span class="string">'foo '</span> ,</div><div class="line">	index:&#123; y : <span class="number">1</span> &#125;</div><div class="line">&#125;);  </div><div class="line"><span class="comment">//使用 command 删除所有 索引</span></div><div class="line">db.runCommand (&#123;dropIndexes : <span class="string">'foo '</span>,index: <span class="string">'*'</span>&#125;)</div></pre></td></tr></table></figure>
<p>如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。</p>
<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>创建唯一索引，同时这也是一个符合唯一索引<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">db.things.ensureIndex (</div><div class="line">&#123;</div><div class="line">	<span class="string">'firstName '</span> :   <span class="number">1</span> ,</div><div class="line">	<span class="string">'lastName '</span> :   <span class="number">1</span></div><div class="line">&#125;,   &#123;</div><div class="line"><span class="comment">//指定为唯一索引</span></div><div class="line"><span class="string">'unique'</span>: <span class="literal">true</span> ,</div><div class="line"><span class="comment">//删除重复 记录</span></div><div class="line"><span class="string">'dropDups'</span>: <span class="literal">true</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="强制使用索引"><a href="#强制使用索引" class="headerlink" title="强制使用索引"></a>强制使用索引</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//强制使用索引 a 和 b</span></div><div class="line">db.collection.find(&#123;</div><div class="line">	<span class="string">'a'</span> :   <span class="number">4</span> ,</div><div class="line">	<span class="string">'b'</span> :   <span class="number">5</span> ,</div><div class="line">	<span class="string">'c'</span> :   <span class="number">6</span></div><div class="line">&#125;).hint(&#123;</div><div class="line">	<span class="string">'a'</span> :   <span class="number">1</span> ,</div><div class="line">	<span class="string">'b'</span> :   <span class="number">1</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//强制不使用任何 索引</span></div><div class="line">db.collection.find().hint(&#123;</div><div class="line">	<span class="string">'$natural'</span> :   <span class="number">1</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<p>索引总结:</p>
<ul>
<li>索引可以加速查询；</li>
<li>单个索引无需在意其索引方向；</li>
<li>多键索引需要慎重考虑每个索引的方向；</li>
<li>做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；</li>
<li>不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；</li>
<li>唯一索引可以用来消除重复记录；</li>
<li>地理空间索引是没有单位的，其内部实现是基本的勾股定理算法</li>
</ul>
<h2 id="4-mongo数据库管理"><a href="#4-mongo数据库管理" class="headerlink" title="4.mongo数据库管理"></a>4.mongo数据库管理</h2><h3 id="安全与认证"><a href="#安全与认证" class="headerlink" title="安全与认证"></a>安全与认证</h3><ol>
<li>默认为无认证，启动用登录 shell ；</li>
<li>添加账号；</li>
<li>关闭 shell .关闭 MongoDB ；</li>
<li>为 MongoDB 增加 — auth 参数；</li>
<li>重 启 MongoDB ；</li>
<li>登录 shell ，此时就需要认证了</li>
</ol>
<h3 id="冷备份"><a href="#冷备份" class="headerlink" title="冷备份"></a>冷备份</h3><ol>
<li>关闭MongoDB引擎</li>
<li>拷贝数据库文件夹及文件</li>
<li>恢复时反向操作即可        </li>
</ol>
<ul>
<li>优点：可以完全保证数据完整性；</li>
<li>缺点：需要数据库引擎离线     <h3 id="热备份"><a href="#热备份" class="headerlink" title="热备份"></a>热备份</h3></li>
</ul>
<ol>
<li>保持MongoDB为运行状态</li>
<li>使用mongodump备份数据</li>
<li>使用mongorestore恢复数据</li>
</ol>
<ul>
<li>优点：数据库引擎无须离线</li>
<li>缺点：不能保证数据完整性，操作时会降低MongoDB性能</li>
</ul>
<h3 id="主从复制备份"><a href="#主从复制备份" class="headerlink" title="主从复制备份"></a>主从复制备份</h3><ol>
<li>创建主从复制机制</li>
<li>配置完成后数据会自动同步</li>
<li>恢复途径很多</li>
</ol>
<ul>
<li>优点：可以保持MongoDB处于联机状态，不影响性能</li>
<li>缺点：在数据写入密集的情况下可能无法保证数据完整性</li>
</ul>
<h3 id="修复db-repairDatabase"><a href="#修复db-repairDatabase" class="headerlink" title="修复db.repairDatabase();"></a>修复db.repairDatabase();</h3><ul>
<li>修复数据库还可以起到压缩数据的作用；</li>
<li>修复数据库的操作相当耗时，万不得已请不要使用；</li>
<li>建议经常做数据备份；<h2 id="5-mongo复制-集群"><a href="#5-mongo复制-集群" class="headerlink" title="5.mongo复制(集群)"></a>5.mongo复制(集群)</h2></li>
</ul>
<ol>
<li><p>主从复制<br>选项      说明<br>–only  作用是限定仅复制指定的某个数据库<br>–slavedelay  为复制设置操作延迟，单位为秒<br>–fastsync  以主节点的数据快照为基础启动从节点。<br>–autoresync  当主从节点数据不一致时，是否自动重新同步<br>–oplogSize  设定主节点中的oplog的容量，单位是MB</p>
</li>
<li><p>副本集<br>与普通主从复制集群相比，具有自动检测机制<br>需要使用—replSet 选项指定副本同伴<br>任何时候，副本集当中最多只允许有1个活跃节点</p>
</li>
<li><p>读写分离<br>将密集的读取操作分流到从节点上，降低主节点的负载<br>默认情况下，从节点是不允许处理<br>客户端请求的，需要使用—slaveOkay打开<br>不适用于实时性要求非常高的应用</p>
</li>
<li><p>工作原理—— OPLOG<br>oplog保存在local数据库中，oplog就在其中的<br>oplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：<br> ts：操作时间戳，占用4字节<br> op：操作类型，占用1字节<br> ns：操作对象的命名空间（或理解为集合全名）<br> o：进一步指定所执行的操作，例如插入</p>
</li>
<li><p>工作原理—— 同步<br> 从节点首次启动时，做完整同步<br> 主节点数据发生变化时，做增量同步<br> 从节点与主节点数据严重不一致时，做完整同步</p>
</li>
<li><p>复制管理—— 诊断<br>db.printReplicationInfo()<br>在主节点上使用<br> 返回信息是oplog的大小以及各种操作的耗时. 空间占用等数据<br>在从节点上使用<br>db.printSlaveReplicationInfo()<br> 返回信息是从节点的数据源列表. 同步延迟时间等</p>
</li>
<li><p>复制管理—— 变更OPLOG 容量<br>在主节点上使用<br> 设定—oplogSize参数<br> 重启MongoDB</p>
</li>
<li><p>复制管理—— 复制认证<br>主从节点皆须配置<br> 存储在local.system.users<br> 优先尝试repl用户<br> 主从节点的用户配置必须保持一致</p>
<h2 id="6-MONGODB分片"><a href="#6-MONGODB分片" class="headerlink" title="6.MONGODB分片"></a>6.MONGODB分片</h2><h3 id="分片与自动分片"><a href="#分片与自动分片" class="headerlink" title="分片与自动分片"></a>分片与自动分片</h3><p>分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分库”、“分区”等概念都属于分片的实际体现。<br>传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据请求路由的过程。</p>
</li>
</ol>
<ul>
<li>递增片键–连续 不均匀 写入集中 分流较差</li>
<li>随机片键–不连续 均匀 写入分散 分流较好</li>
</ul>
<h3 id="三个组成部分"><a href="#三个组成部分" class="headerlink" title="三个组成部分"></a>三个组成部分</h3><ul>
<li>片,保存子集数据的容器</li>
<li>mongos,MongoDB的路由器进程</li>
<li>配置服务器,分·片集群的配置信息<h3 id="创建分片"><a href="#创建分片" class="headerlink" title="创建分片"></a>创建分片</h3></li>
<li>–启动配置服务器,可以创建一个或多个</li>
<li>–添加片,每个片都应该是副本集</li>
<li>–物理服务器,性能、安全和稳定性<h3 id="管理分片"><a href="#管理分片" class="headerlink" title="管理分片"></a>管理分片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询分片</span></div><div class="line">db.shards.find();</div><div class="line"><span class="comment">//数据库</span></div><div class="line">db.databases.find();</div><div class="line"><span class="comment">//块</span></div><div class="line">db.chunks.find();</div><div class="line"><span class="comment">//分片状态</span></div><div class="line">db.printShardingStatus();</div><div class="line"><span class="comment">//删除片</span></div><div class="line">db.runCommand(&#123; removeshard : <span class="string">'ip:port'</span> &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; mongodb从入门到精通&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    mongodb日常使用的一些知识，增删改查，索引，分片。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://geeksblog.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongodb" scheme="http://geeksblog.cc/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Hexo自用黑色主题</title>
    <link href="http://geeksblog.cc/hexo-theme.html"/>
    <id>http://geeksblog.cc/hexo-theme.html</id>
    <published>2017-05-23T03:32:59.000Z</published>
    <updated>2017-06-13T05:53:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> hexo和coding打造静态博客 ：</strong> <Excerpt in index | 首页摘要\><br>使用hexo一年有余，对所有主题都感觉有所缺陷，便修改了一个自用黑色主题，本主题以黑色和蓝色为主，色彩鲜明，主题明确。<br><a id="more"></a></p>
<The rest of contents | 余下全文\>

<h2 id="主题图片"><a href="#主题图片" class="headerlink" title="主题图片"></a>主题图片</h2><p><img src="http://o7kalf5h3.bkt.clouddn.com/blog-index.png" alt="主题首页"> </p>
<h2 id="black-blue主题来源"><a href="#black-blue主题来源" class="headerlink" title="black-blue主题来源"></a>black-blue主题来源</h2><p>本主题修改自<strong>spfk</strong>主题，但之前spfk主题有很多问题，本主题改进如下：</p>
<ol>
<li>压缩js，css提高性能</li>
<li>代码段样式显示更完美</li>
<li>增加本地搜索</li>
<li>设置更合适的字体大小</li>
<li>颜色以黑色和蓝色为主，色彩鲜明</li>
<li>seo适当优化</li>
<li>删除多说，有言，增加畅言评论</li>
<li>删除stylus，全部改用css方便修改</li>
</ol>
<h2 id="主题地址"><a href="#主题地址" class="headerlink" title="主题地址"></a>主题地址</h2><p><a href="https://github.com/maochunguang/black-blue">black-blue</a></p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>大家使用主题的时候，把<strong>主题配置文件_config.yml</strong>以下几项必须修改，项目里实用的是我博客的正式代码，请大家修改成自己的！<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">google_analytics:</span> xxx</div><div class="line"><span class="attr">baidu_analytics:</span> xxxxxxx</div><div class="line"><span class="attr">disqus:</span></div><div class="line"><span class="attr">  on:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  shortname:</span> xxxx</div><div class="line"><span class="comment"># 畅言评论</span></div><div class="line"><span class="attr">changyan:</span></div><div class="line"><span class="attr">  on:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  appid:</span> xxxx</div><div class="line"><span class="attr">  conf:</span> xxxxx</div></pre></td></tr></table></figure></p>
<h2 id="black-blue主题配置"><a href="#black-blue主题配置" class="headerlink" title="black-blue主题配置"></a>black-blue主题配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>复制主题到themes目录下<code>cd themes &amp;&amp; git clone https://github.com/maochunguang/black-blue</code>，修改_config.yml <code>theme: black-blue</code></p>
<h3 id="安装常用插件，建议全部安装"><a href="#安装常用插件，建议全部安装" class="headerlink" title="安装常用插件，建议全部安装"></a>安装常用插件，建议全部安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## rss插件</span></div><div class="line">npm install hexo-generator-feed --save</div><div class="line"><span class="comment">## 站点sitemap生成插件</span></div><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div><div class="line"><span class="comment">## 百度url提交</span></div><div class="line">npm install hexo-baidu-url-submit --save</div><div class="line"><span class="comment">## 本地搜索插件集成</span></div><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<h3 id="博客全局配置，修改根目录下-config-yml"><a href="#博客全局配置，修改根目录下-config-yml" class="headerlink" title="博客全局配置，修改根目录下_config.yml"></a>博客全局配置，修改根目录下_config.yml</h3><p>插件配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Plugins:</span></div><div class="line"><span class="bullet">-</span> hexo-generator-feed</div><div class="line"><span class="bullet">-</span> hexo-generator-sitemap</div><div class="line"><span class="bullet">-</span> hexo-generator-baidu-sitemap</div></pre></td></tr></table></figure></p>
<p>rss设置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">  type:</span> atom</div><div class="line"><span class="attr">  path:</span> atom.xml</div><div class="line"><span class="attr">  limit:</span> <span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>本地搜索配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> search.json</div><div class="line"><span class="attr">  field:</span> post</div></pre></td></tr></table></figure></p>
<p>站点地图，seo搜索引擎需要<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">  path:</span> sitemap.xml</div><div class="line"><span class="attr">baidusitemap:</span></div><div class="line"><span class="attr">  path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>菜单配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 添加单独的页面:hexo new page about，about是页面的路径，也是名称</span></div><div class="line"><span class="comment">## Tags Cloud Page: `hexo new page tags`</span></div><div class="line"><span class="attr">menu:</span></div><div class="line">  <span class="comment"># 主页: /archives/</span></div><div class="line">  所有文章: /archives/</div><div class="line">  玩转开发工具: /categories/开发工具/</div><div class="line">  玩转数码: /categories/digital</div><div class="line">  认知提升: /categories/cognition</div><div class="line">  关于我: /about/</div></pre></td></tr></table></figure></p>
<p>评论配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 是否开启畅言评论，</span></div><div class="line"><span class="attr">changyan:</span></div><div class="line"><span class="attr">  on:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  appid:</span> xxxx</div><div class="line"><span class="attr">  conf:</span> xxxxxxxxxxxx</div><div class="line"><span class="comment"># 是否开启disqus，</span></div><div class="line"><span class="attr">disqus:</span></div><div class="line"><span class="attr">  on:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  shortname:</span> mmmmmm</div></pre></td></tr></table></figure></p>
<h3 id="其他配置，详细的配置请下载主题，都有注释"><a href="#其他配置，详细的配置请下载主题，都有注释" class="headerlink" title="其他配置，详细的配置请下载主题，都有注释"></a>其他配置，<strong>详细的配置请下载主题，都有注释</strong></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数学公式支持</span></div><div class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></div><div class="line"><span class="comment"># Socail Share | 是否开启分享</span></div><div class="line"><span class="attr">baidushare:</span> <span class="literal">true</span></div><div class="line"><span class="comment"># 谷歌分析，百度分析，seo分析很有用</span></div><div class="line"><span class="attr">google_analytics:</span> xxxxxx</div><div class="line"><span class="attr">baidu_analytics:</span> xxcxcxcsdsf</div></pre></td></tr></table></figure>
<h2 id="自定义配置（对前端技术有了解即可）"><a href="#自定义配置（对前端技术有了解即可）" class="headerlink" title="自定义配置（对前端技术有了解即可）"></a>自定义配置（对前端技术有了解即可）</h2><h3 id="头像配置"><a href="#头像配置" class="headerlink" title="头像配置"></a>头像配置</h3><p>在themes/black-blue/source/img/avatar.png,替换此头像即可实现自定义头像</p>
<h3 id="背景图片配置"><a href="#背景图片配置" class="headerlink" title="背景图片配置"></a>背景图片配置</h3><p>在themes/black-blue/source/background/,替换为自己喜欢的图片，图片名称不能改</p>
<h3 id="添加评论插件"><a href="#添加评论插件" class="headerlink" title="添加评论插件"></a>添加评论插件</h3><p>比如把畅言替换为有言</p>
<ol>
<li><p>先修改themes/black-blue/_config.yml文件</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">changyan:</span></div><div class="line"><span class="attr">  on:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  uid:</span> xxxxxxx</div></pre></td></tr></table></figure>
</li>
<li><p>修改themes/black-blue/layout/_partial/comments/changyan.ejs</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"changyan"</span> id=<span class="string">"comments"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"uyan_frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://v2.uyan.cc/code/uyan.js?uid=&lt;%= uid%&gt;"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/section&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改themes/black-blue/layout/_partial/article.ejs</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;%- partial(<span class="string">'comments/changyan'</span>, &#123;</div><div class="line">  uid: theme.changyan.uid</div><div class="line">&#125;) %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>重新生成页面<code>hexo g</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; hexo和coding打造静态博客 ：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要\&gt;&lt;br&gt;使用hexo一年有余，对所有主题都感觉有所缺陷，便修改了一个自用黑色主题，本主题以黑色和蓝色为主，色彩鲜明，主题明确。&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://geeksblog.cc/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://geeksblog.cc/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>数码产品选购</title>
    <link href="http://geeksblog.cc/digital-info.html"/>
    <id>http://geeksblog.cc/digital-info.html</id>
    <published>2017-05-18T02:35:22.000Z</published>
    <updated>2017-05-26T06:12:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 数码产品选购：</strong> <Excerpt in index | 首页摘要><br>作为一个数码产品控，一出新的的电子产品，我都欣喜若狂。看参数，看评价，感觉合适，就会买。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="我喜欢的电子产品"><a href="#我喜欢的电子产品" class="headerlink" title="我喜欢的电子产品"></a>我喜欢的电子产品</h2><ul>
<li>电脑（笔记本，台式机，游戏主机，工作站）</li>
<li>手机（苹果，安卓，其它智能手机）</li>
<li>平板（安卓平板，ios平板）</li>
<li>电子书阅读器</li>
<li>电子手表</li>
</ul>
<h2 id="选购的原则"><a href="#选购的原则" class="headerlink" title="选购的原则"></a>选购的原则</h2><ol>
<li>产品生态，买电子产品虽然不是随大流，但是用户群体一定程度决定了生态。用的人多，相应的资源会比较丰富，遇到问题很快找到解决方案。</li>
<li>产品价格，性价比在中国，乃至全世界都是很具有吸引力的。物美价廉的都不买的要么是脑残，要么是钱多没地方花。</li>
<li>产品硬件参数，买电子产品不看参数，肯定是买不到物美价廉的产品。</li>
<li>产品外观，现在是看脸的时代，新时代的数码产品对外观要求更高，更时尚。</li>
<li>功能，买电子产品，首要的就是功能，如果功能都不齐全，再漂亮，再便宜都没用。</li>
<li>买电子产品的目的，没有任何需求就是瞎买。</li>
</ol>
<h2 id="电子产品的使用"><a href="#电子产品的使用" class="headerlink" title="电子产品的使用"></a>电子产品的使用</h2><p>我见过很多人买电子产品，比如买电子书阅读器，买一个kobo电子书折腾来折腾去，今天刷这个系统，明天改那个设置，<br>书还没读几本，系统刷了几十次，天天刷固件。这真的是得不偿失，捡了芝麻丢了西瓜。<br>第一，买电子产品是为了用的，买回来之后配置好之后，就不要来回折腾系统和配置了，把时间放到核心功能上。<br>第二，买电子产品不要攀比，就跟买苹果手机一样，如果只是为了装B买，真没必要，结果自己还用不习惯。<br>第三，了解自己的需求，需要什么买什么，</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 数码产品选购：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;作为一个数码产品控，一出新的的电子产品，我都欣喜若狂。看参数，看评价，感觉合适，就会买。&lt;br&gt;
    
    </summary>
    
      <category term="digital" scheme="http://geeksblog.cc/categories/digital/"/>
    
    
      <category term="数码产品" scheme="http://geeksblog.cc/tags/%E6%95%B0%E7%A0%81%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>egg.js实战技巧</title>
    <link href="http://geeksblog.cc/eggjs-action.html"/>
    <id>http://geeksblog.cc/eggjs-action.html</id>
    <published>2017-05-15T19:07:27.000Z</published>
    <updated>2017-05-26T06:12:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> egg.js实战技巧：</strong> <Excerpt in index | 首页摘要><br>用eggjs一个多月，踩了不少坑，把踩坑过程分享出来，希望大家少走弯路。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="egg-js介绍"><a href="#egg-js介绍" class="headerlink" title="egg.js介绍"></a>egg.js介绍</h2><p>请去官网看介绍 <a href="https://eggjs.org/zh-cn/">egg.js</a></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文所有示例基于async function，node版本node&gt;=7.6.</p>
<h2 id="controller和service的两种写法：基于类和普通方法"><a href="#controller和service的两种写法：基于类和普通方法" class="headerlink" title="controller和service的两种写法：基于类和普通方法"></a>controller和service的两种写法：基于类和普通方法</h2><p>这两种写法在获取全局变量有些地方不一样，这里列举最常见的几个全局变量的异同。</p>
<ol>
<li><p>基于类的controller</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = app =&gt; &#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">app</span>.<span class="title">Controller</span> </span>&#123;</div><div class="line">    <span class="keyword">async</span> queryUser() &#123;</div><div class="line">      <span class="comment">// logger获取，request对象获取</span></div><div class="line">      app.logger.info(<span class="keyword">this</span>.ctx.request.body)</div><div class="line">      <span class="comment">// 全局配置文件获取</span></div><div class="line">      <span class="keyword">const</span> domain = app.config.domain</div><div class="line">      <span class="keyword">let</span> users = []</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 全局插件获取</span></div><div class="line">        users = <span class="keyword">await</span> app.model.user.find(&#123;&#125;)</div><div class="line">        <span class="comment">// service获取</span></div><div class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.user.find(&#123;&#125;)</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        app.logger.error(e)</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 获取body</span></div><div class="line">      <span class="keyword">this</span>.ctx.body = &#123;</div><div class="line">        users,</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 重定向写法</span></div><div class="line">      <span class="keyword">this</span>.ctx.redirect(<span class="string">'http://www.baidu.com'</span>)</div><div class="line">      <span class="comment">// render 模版引擎，</span></div><div class="line">      <span class="keyword">this</span>.ctx.body = app.nunjucks.render(<span class="string">'register.nj'</span>)</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">return</span> User</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>基于普通方法(exports)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">exports.register = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// logger获取，request对象获取</span></div><div class="line">  <span class="keyword">this</span>.logger.info(<span class="keyword">this</span>.request.body)</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 全局配置文件获取</span></div><div class="line">    <span class="keyword">const</span> domain = <span class="keyword">this</span>.app.config.domain</div><div class="line">    <span class="comment">// service获取</span></div><div class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.service.register.register(<span class="keyword">this</span>.token, <span class="keyword">this</span>.request.body)</div><div class="line">    <span class="comment">// 全局插件获取</span></div><div class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="keyword">this</span>.app.model.user.find(&#123;&#125;)</div><div class="line">    <span class="keyword">this</span>.service.message.send()</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="keyword">this</span>.logger.error(e)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 获取body</span></div><div class="line">  <span class="keyword">this</span>.body = &#123; <span class="string">'success'</span> &#125;</div><div class="line">  <span class="comment">// 重定向写法</span></div><div class="line">  <span class="keyword">this</span>.redirect(<span class="string">'http://www.baidu.com'</span>)</div><div class="line">  <span class="comment">// render 模版引擎，</span></div><div class="line">  <span class="keyword">this</span>.body = <span class="keyword">this</span>.app.nunjucks.render(<span class="string">'success.nj'</span>, data)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h2><p>egg.js的配置文件非常人性化，有config.default.js,config.default.prod.js,config.test.js等等。<br>运行时根据环境变量加载不同的配置文件。默认时config.default.js,指定环境变量后会把config.env.js(对应环境)的配置文件和config.default.js合并。</p>
<h2 id="调试代码"><a href="#调试代码" class="headerlink" title="调试代码"></a>调试代码</h2><p>由于使用了async await，调试起来有些麻烦，建议使用webstorm或者chrome进行调试，eggjs自带egg-bin，支持在chrome里进行调试，对async，await有良好的支持。<br>使用chrome调试，配置如下：<br>在package.json中添加script,使用<code>npm run debug</code>启动，复制链接在chrome中打开，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"start"</span>: <span class="string">"node index.js"</span>,</div><div class="line">  <span class="string">"debug"</span>: <span class="string">"egg-bin debug"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://o7kalf5h3.bkt.clouddn.com/debug-egg.png" alt="命令行显示"></p>
<p><img src="http://o7kalf5h3.bkt.clouddn.com/debug-egg-point.png" alt="断点调试"></p>
<h2 id="此文章持续更新-欢迎收藏关注"><a href="#此文章持续更新-欢迎收藏关注" class="headerlink" title="此文章持续更新,欢迎收藏关注"></a>此文章持续更新,欢迎收藏关注</h2><blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; egg.js实战技巧：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;用eggjs一个多月，踩了不少坑，把踩坑过程分享出来，希望大家少走弯路。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://geeksblog.cc/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="node" scheme="http://geeksblog.cc/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>如何写一篇好博客？</title>
    <link href="http://geeksblog.cc/bestblog.html"/>
    <id>http://geeksblog.cc/bestblog.html</id>
    <published>2017-05-15T15:04:48.000Z</published>
    <updated>2017-05-15T15:27:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 提高自己博客的质量：</strong> <Excerpt in index | 首页摘要><br>写博客陆陆续续也有一年了，但是一直没有多少访问量，仔细看了很多大神的博客，总结了几点，分享一下。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="好博客，好文章是什么样的？"><a href="#好博客，好文章是什么样的？" class="headerlink" title="好博客，好文章是什么样的？"></a>好博客，好文章是什么样的？</h2><ol>
<li>文章名称鲜明，一看名称就知道关于什么的内容</li>
<li>整体结构清晰，把事件或者原理的始末按照‘什么样（what？）’，‘为什么（why）’，‘怎么做（how）’说明</li>
<li>简明扼要。太啰嗦，没人看。</li>
<li>难易适中，太高深也没人看</li>
<li>图文搭配，有句话说的好，<strong>一图胜千文</strong>，好的图片胜过千言万语</li>
</ol>
<h2 id="怎么写出好博客？"><a href="#怎么写出好博客？" class="headerlink" title="怎么写出好博客？"></a>怎么写出好博客？</h2><ol>
<li>定主题和文章名称。如果想写一个关于redis后台启动的文章，名称要准确，就叫redis后台启动，不要起啰嗦的名字，比如redis如何后台启动</li>
<li>准备资料阶段，熟悉redis配置相关资料，做好功课</li>
<li>定文章的结构和提纲。还拿这个redis后台启动为例，你得说明什么是后台启动？为什么要后台启动？如何做到后台启动？</li>
<li>语言表单，简单直白，不用凑字数</li>
<li>深入主题，比如挖掘更多redis的配置，把参数简要说明</li>
<li>找一个好图片，如果找不到，自己制作一个最契合自己主题的图片</li>
<li>把文章发给好友阅读，提出宝贵的意见</li>
<li>改进博客</li>
<li>坚持写博客</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 提高自己博客的质量：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;写博客陆陆续续也有一年了，但是一直没有多少访问量，仔细看了很多大神的博客，总结了几点，分享一下。&lt;br&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://geeksblog.cc/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="others" scheme="http://geeksblog.cc/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Redis后台启动详细配置</title>
    <link href="http://geeksblog.cc/redis-config.html"/>
    <id>http://geeksblog.cc/redis-config.html</id>
    <published>2017-05-15T14:58:07.000Z</published>
    <updated>2017-05-26T06:12:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Redis后台启动详细配置：</strong> <Excerpt in index | 首页摘要><br>  redis启动的时候有多种模式，后台启动，集群启动等等。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在开发中一般都是在命令行中直接运行<code>redis-server</code>,但是这样命令行关闭，服务就停止了。<br>如果要在后台运行redis服务，需要制定配置文件。这里以<strong>ubuntu14</strong>为例子</p>
<h2 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h2><p>查看‘/etc/redis/redis.conf’,没有可以创建一个，或者下载一个，配置文件位置没有要求</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>把daemonize设置为yes，<br>然后<code>redis-server /etc/redis/redis.conf</code>启动服务，</p>
<h2 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h2><p><code>ps -ef|grep redis-server</code>查看是否有redis进程存在</p>
<h2 id="更多配置，在conf文件有说明"><a href="#更多配置，在conf文件有说明" class="headerlink" title="更多配置，在conf文件有说明"></a>更多配置，在conf文件有说明</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"># 是否以后台daemon方式运行，默认是 no，一般我们会改为 yes</div><div class="line">daemonize no</div><div class="line">pidfile /var/run/redis.pid</div><div class="line"># 只允许本机访问</div><div class="line">bind <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div><div class="line"># 端口设置</div><div class="line">port <span class="number">6379</span></div><div class="line">tcp-backlog <span class="number">511</span></div><div class="line">timeout <span class="number">0</span></div><div class="line">tcp-keepalive <span class="number">0</span></div><div class="line">loglevel notice</div><div class="line"># 日志文件</div><div class="line">logfile <span class="string">""</span></div><div class="line"># 开启数据库的数量，Redis 是有数据库概念的，默认是 <span class="number">16</span> 个，数字从 <span class="number">0</span> ~ <span class="number">15</span></div><div class="line">databases <span class="number">16</span></div><div class="line">save <span class="number">900</span> <span class="number">1</span></div><div class="line">save <span class="number">300</span> <span class="number">10</span></div><div class="line">save <span class="number">60</span> <span class="number">10000</span></div><div class="line">stop-writes-on-bgsave-error yes</div><div class="line">rdbcompression yes</div><div class="line">rdbchecksum yes</div><div class="line">dbfilename dump.rdb</div><div class="line">dir ./</div><div class="line">slave-serve-stale-data yes</div><div class="line">slave-read-only yes</div><div class="line">repl-diskless-sync no</div><div class="line">repl-diskless-sync-delay <span class="number">5</span></div><div class="line">repl-disable-tcp-nodelay no</div><div class="line"># 密码设置，需要设置密码打开</div><div class="line">requirepass <span class="number">123455</span></div><div class="line">slave-priority <span class="number">100</span></div><div class="line">appendonly no</div><div class="line">appendfilename <span class="string">"appendonly.aof"</span></div><div class="line">appendfsync everysec</div><div class="line">no-appendfsync-on-rewrite no</div><div class="line">auto-aof-rewrite-percentage <span class="number">100</span></div><div class="line">auto-aof-rewrite-min-size <span class="number">64</span>mb</div><div class="line">aof-load-truncated yes</div><div class="line">lua-time-limit <span class="number">5000</span></div><div class="line">slowlog-log-slower-than <span class="number">10000</span></div><div class="line">slowlog-max-len <span class="number">128</span></div><div class="line">latency-monitor-threshold <span class="number">0</span></div><div class="line">notify-keyspace-events <span class="string">""</span></div><div class="line">hash-max-ziplist-entries <span class="number">512</span></div><div class="line">hash-max-ziplist-value <span class="number">64</span></div><div class="line"><span class="type">list</span>-max-ziplist-entries <span class="number">512</span></div><div class="line"><span class="type">list</span>-max-ziplist-value <span class="number">64</span></div><div class="line">set-max-intset-entries <span class="number">512</span></div><div class="line">zset-max-ziplist-entries <span class="number">128</span></div><div class="line">zset-max-ziplist-value <span class="number">64</span></div><div class="line">hll-sparse-max-bytes <span class="number">3000</span></div><div class="line">activerehashing yes</div><div class="line">client-output-buffer-limit normal <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></div><div class="line">client-output-buffer-limit slave <span class="number">256</span>mb <span class="number">64</span>mb <span class="number">60</span></div><div class="line">client-output-buffer-limit pubsub <span class="number">32</span>mb <span class="number">8</span>mb <span class="number">60</span></div><div class="line">hz <span class="number">10</span></div><div class="line">aof-rewrite-incremental-fsync yes</div></pre></td></tr></table></figure>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Redis后台启动详细配置：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;  redis启动的时候有多种模式，后台启动，集群启动等等。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://geeksblog.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="http://geeksblog.cc/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>用koa2.x写下载漫画的爬虫</title>
    <link href="http://geeksblog.cc/spider-koa2.html"/>
    <id>http://geeksblog.cc/spider-koa2.html</id>
    <published>2017-05-13T23:15:38.000Z</published>
    <updated>2017-05-26T06:12:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 用koa2.x写下载漫画的爬虫：</strong> <Excerpt in index | 首页摘要><br>使用koa2.x的async ，await解决异步问题，写一个下载漫画的爬虫，代码里有惊喜和福利哦！<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><ol>
<li>安装nodejs&gt;7.6,安装koa-generator</li>
<li>直接<code>koa2 spider</code>,生成项目</li>
<li>安装request,request-promise,cheerio,mkdirp</li>
<li>npm install安装依赖</li>
</ol>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>图片或者漫画爬虫的思路很简单，首先观察url的规律，把url按规律加入到下载任务，其实就是请求获得html内容，然后对html进行解析，找到下载的图片url（一般都是img标签的src属性值），把url放到数组保存，使用async await控制所有的任务，直到把所有的图片下载完。</p>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>但是nodejs本身上异步的，如果你直接在for循环里去下载，肯定是不行的，必须控制好异步的执行上关键。<br>爬虫简单，处理好异步难。这里我使用的es7中async，await配合promise解决异步问题，还可以使用async模块，eventproxy，等等异步控制模块来解决。</p>
<h2 id="核心代码-spider-js"><a href="#核心代码-spider-js" class="headerlink" title="核心代码,spider.js"></a>核心代码,spider.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">"request-promise"</span>);</div><div class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</div><div class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">'mkdirp'</span>);</div><div class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>);</div><div class="line">exports.download = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> dir = <span class="string">'images'</span>;</div><div class="line">    <span class="comment">// 图片链接地址</span></div><div class="line">    <span class="keyword">let</span> links = [];</div><div class="line">    <span class="comment">// 创建目录</span></div><div class="line">    mkdirp(dir);</div><div class="line">    <span class="keyword">var</span> urls = [];</div><div class="line">    <span class="keyword">let</span> tasks = [];</div><div class="line">    <span class="keyword">let</span> downloadTask = [];</div><div class="line">    <span class="keyword">let</span> url = config.url;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= config.size; i++) &#123;</div><div class="line">        <span class="keyword">let</span> link = url + <span class="string">'_'</span> + i + <span class="string">'.html'</span>;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</div><div class="line">            link = url + <span class="string">'.html'</span>;</div><div class="line">        &#125;</div><div class="line">        tasks.push(getResLink(i, link))</div><div class="line">    &#125;</div><div class="line">    links = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(tasks)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'links=========='</span>, links.length);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</div><div class="line">        <span class="keyword">let</span> item = links[i];</div><div class="line">        <span class="keyword">let</span> index = item.split(<span class="string">'___'</span>)[<span class="number">0</span>];</div><div class="line">        <span class="keyword">let</span> src = item.split(<span class="string">'___'</span>)[<span class="number">1</span>];</div><div class="line">        downloadTask.push(downloadImg(src, dir, index + links[i].substr(<span class="number">-4</span>, <span class="number">4</span>)));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.all(downloadTask);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadImg</span>(<span class="params">url, dir, filename</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'download begin---'</span>, url);</div><div class="line">    request.get(url).pipe(fs.createWriteStream(dir + <span class="string">"/"</span> + filename)).on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'download success'</span>, url);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getResLink</span>(<span class="params">index, url</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> body = <span class="keyword">await</span> request(url);</div><div class="line">    <span class="keyword">let</span> urls = [];</div><div class="line">    <span class="keyword">var</span> $ = cheerio.load(body);</div><div class="line">    $(config.rule).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>);</div><div class="line">        urls.push(src);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> index + <span class="string">'___'</span> + urls[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>由于爬虫的复杂性基于不同的网站，不同的任务很不一样，这里只是把几个常用的变量抽取到了config.js。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//初始url</span></div><div class="line">    url: <span class="string">'http://www.xieet.com/meinv/230'</span>,</div><div class="line">    size: <span class="number">10</span>,</div><div class="line">    <span class="comment">// 选中图片img标签的选择器</span></div><div class="line">    rule: <span class="string">'.imgbox a img'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h2><ol>
<li>下载我上传的代码<a href="https://github.com/maochunguang/koa-spider">koa-spider</a></li>
<li>npm install,npm start即可运行</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实无论是写爬虫还是些其他程序，使用nodejs很大一部分都是要处理异步，要学好nodejs必须学好异步处理。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 用koa2.x写下载漫画的爬虫：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;使用koa2.x的async ，await解决异步问题，写一个下载漫画的爬虫，代码里有惊喜和福利哦！&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://geeksblog.cc/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="nodejs" scheme="http://geeksblog.cc/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发</title>
    <link href="http://geeksblog.cc/wechat-dev.html"/>
    <id>http://geeksblog.cc/wechat-dev.html</id>
    <published>2017-04-28T04:55:33.000Z</published>
    <updated>2017-05-26T06:12:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 微信公众号开发：</strong> <Excerpt in index | 首页摘要><br>微信公众号开发的一些注意事项<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><ol>
<li>微信公众号开发者配置，url，token，</li>
<li>本地调试，使用内网穿透工具，花生壳，或者netapp，买一个可以自定义域名的，内网映射到制定端口，</li>
<li>项目搭建，express或koa搭建项目，npm有微信的现成包，直接配置</li>
</ol>
<h2 id="回复"><a href="#回复" class="headerlink" title="回复"></a>回复</h2><ol>
<li>回复和发消息并没有什么特别注意的地方，这里不多说</li>
</ol>
<h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><ol>
<li>微信菜单有自定义菜单，有个性化菜单，但是个性化菜单优先级高于个性化菜单</li>
<li>个性化菜单可以根据用户的tag，sex，group等属性进行区分菜单</li>
<li>注意，我在使用时发现<strong>个性化菜单经常会失效</strong>，不起作用，偶尔会起作用，如果线上打算使用个性化菜单，请慎重并仔细测试</li>
</ol>
<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>授权有网页授权，js sdk授权，<br>网页授权也有两种，一个上静默授权，一个是点击授权，贴一下js sdk调用前认证的代码，要使用sha1加密<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> getSignConfig(originUrl) &#123;</div><div class="line">      <span class="keyword">let</span> data = &#123;&#125;</div><div class="line">      <span class="keyword">const</span> sha1 = crypto.createHash(<span class="string">'sha1'</span>)</div><div class="line">      <span class="keyword">const</span> appId = <span class="keyword">this</span>.app.config.weixin.appID</div><div class="line">      <span class="keyword">const</span> jsapi_ticket = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.token.getJSApiTicket()</div><div class="line">      <span class="keyword">const</span> noncestr = <span class="keyword">this</span>.app.config.jsapi.noncestr</div><div class="line">      <span class="keyword">const</span> url = <span class="keyword">this</span>.app.config.domain + originUrl</div><div class="line">      <span class="keyword">const</span> timestamp = <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>)</div><div class="line">      <span class="comment">// sha1加密</span></div><div class="line">      <span class="keyword">const</span> str = <span class="string">`jsapi_ticket=<span class="subst">$&#123;jsapi_ticket&#125;</span>&amp;noncestr=<span class="subst">$&#123;noncestr&#125;</span>&amp;timestamp=<span class="subst">$&#123;timestamp&#125;</span>&amp;url=<span class="subst">$&#123;url&#125;</span>`</span></div><div class="line">      sha1.update(str)</div><div class="line">      <span class="keyword">const</span> signature = sha1.digest(<span class="string">'hex'</span>)</div><div class="line">      data = &#123; jsapi_ticket, noncestr, timestamp, url, signature, appId &#125;</div><div class="line">      <span class="keyword">return</span> data</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>调用js sdk页面上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">wx.config(&#123;</div><div class="line">    debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,</span></div><div class="line">    appId: appId, <span class="comment">// 必填，公众号的唯一标识</span></div><div class="line">    timestamp: timestamp, <span class="comment">// 必填，生成签名的时间戳</span></div><div class="line">    nonceStr: nonceStr, <span class="comment">// 必填，生成签名的随机串</span></div><div class="line">    signature:  signature,<span class="comment">// 必填，签名，见附录1</span></div><div class="line">    jsApiList: [<span class="string">'closeWindow'</span>] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class="line">&#125;);</div><div class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      wx.closeWindow();</div><div class="line">    &#125;,<span class="number">2000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="实用的常识"><a href="#实用的常识" class="headerlink" title="实用的常识"></a>实用的常识</h2><ol>
<li>tag不能重复创建，但是给用户可以重复打同一个tag</li>
<li>更改菜单一般五分钟生效，或者重新关注公众号，立马能看到</li>
<li>如果调用js sdk，务必使用https，防止因为安全问题，导致ios下js下载失败。如果你的服务是https，而引用了https的微信js，在ios下肯定会下载失败，这是ios的安全机制导致的。</li>
<li>微信关闭窗口的js接口，不管jsconfig验证是否通过，窗口都可以关闭</li>
<li>微信的token过期时间上2h，但是很多时候30分钟不到可能已经失效，建议<strong>把token过期时间设置为10分钟之内</strong></li>
</ol>
<h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><ol>
<li>创建菜单的时候，菜单长度不合法，仔细检查自己传的json菜单，一般都是<strong>json格式问题</strong>，而不是长度</li>
<li>redirect_uri不合法，是创建授权菜单的redirect_uri和<strong>网页授权域名</strong>配置不一样</li>
<li>关注公众号，服务端设置的欢迎消息发不过去，如果自己代码无异常，一般是因为<strong>token过期</strong></li>
</ol>
<h2 id="以后遇到其他问题继续补充"><a href="#以后遇到其他问题继续补充" class="headerlink" title="以后遇到其他问题继续补充"></a>以后遇到其他问题继续补充</h2><blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 微信公众号开发：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;微信公众号开发的一些注意事项&lt;br&gt;
    
    </summary>
    
      <category term="javacript" scheme="http://geeksblog.cc/categories/javacript/"/>
    
    
      <category term="编程语言" scheme="http://geeksblog.cc/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Mac最实用快捷键</title>
    <link href="http://geeksblog.cc/mac-shortcut.html"/>
    <id>http://geeksblog.cc/mac-shortcut.html</id>
    <published>2017-04-21T02:53:08.000Z</published>
    <updated>2017-05-26T06:12:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Mac最实用快捷键：</strong> <Excerpt in index | 首页摘要><br>mac系统最常用的一些快捷键，吐血推荐<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul>
<li>打开文件／文件夹    cmd + o</li>
<li>选择文件／文件夹    文件夹名称（英文）</li>
<li>删除文件／文件夹    cmd + del</li>
<li>新建文件夹         cmd + shift + n</li>
<li>新建文件</li>
<li>预览文件           space</li>
<li>重命名             enter</li>
<li>文件目录前进后退        cmd + [ 或者 cmd + ]</li>
<li>文件上层目录，下层目录   cmd + ⬆️  cmd + ⬇️</li>
</ul>
<h2 id="搜索操作"><a href="#搜索操作" class="headerlink" title="搜索操作"></a>搜索操作</h2><p>全局搜索  ctrl + space<br>文本搜索  cmd + f</p>
<h2 id="mac-fn快捷键"><a href="#mac-fn快捷键" class="headerlink" title="mac fn快捷键"></a>mac fn快捷键</h2><p>屏幕亮度 f1 f2<br>任务视图 f3<br>应用程序 f4<br>键盘背光 f5 f6<br>音乐播放 f7 f8 f9<br>音量 f10 f11 f12</p>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Mac最实用快捷键：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;mac系统最常用的一些快捷键，吐血推荐&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://geeksblog.cc/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="mac" scheme="http://geeksblog.cc/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>那些年读的书</title>
    <link href="http://geeksblog.cc/mybooks.html"/>
    <id>http://geeksblog.cc/mybooks.html</id>
    <published>2017-04-15T06:49:46.000Z</published>
    <updated>2017-06-14T02:56:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 那些年读的书：</strong> <Excerpt in index | 首页摘要><br>人生漫漫，不知不觉读了好多书，此贴只记录自己读过哪些书，不做多余的分析和总结。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="读过哪些种类的"><a href="#读过哪些种类的" class="headerlink" title="读过哪些种类的"></a>读过哪些种类的</h2><ul>
<li>编程专业类</li>
<li>小说类</li>
<li>励志类</li>
</ul>
<h2 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h2><ul>
<li>平凡的世界</li>
<li>白鹿原</li>
<li>穆斯林的葬礼</li>
<li>金庸武侠系列</li>
<li>古龙武侠小说</li>
<li>梁羽生武侠小说</li>
<li>余华作品集</li>
<li><p>雷米小说全集（侦探类）</p>
</li>
<li><p>网络小说：</p>
<ul>
<li>诛仙，</li>
<li>盗墓笔记，</li>
<li>泡沫之夏，</li>
<li>芈月传，</li>
</ul>
</li>
</ul>
<h2 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h2><ul>
<li>java编程思想</li>
<li>effective java</li>
<li>java并发编程的艺术</li>
<li>代码整洁之道</li>
<li><p>黑客与画家</p>
</li>
<li><p>深入浅出nodejs</p>
</li>
<li>nodejs实战</li>
<li>js高级程序设计</li>
<li>survivejs</li>
<li>redux和react中文手册</li>
<li>你不知道的javascript</li>
<li><p>算法javascript实现</p>
</li>
<li><p>mysql权威指南</p>
</li>
<li>mongodb权威指南</li>
<li>mongodb实战第二版</li>
<li>redis入门</li>
</ul>
<h2 id="经管励志"><a href="#经管励志" class="headerlink" title="经管励志"></a>经管励志</h2><ul>
<li>时间管理</li>
<li>一分钟系列</li>
<li>番茄工作法图解</li>
</ul>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 那些年读的书：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;人生漫漫，不知不觉读了好多书，此贴只记录自己读过哪些书，不做多余的分析和总结。&lt;br&gt;
    
    </summary>
    
      <category term="book" scheme="http://geeksblog.cc/categories/book/"/>
    
    
      <category term="学习笔记" scheme="http://geeksblog.cc/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
